// Code generated by generate.clj DO NOT EDIT
package aws

import (
	"encoding/json"
	"errors"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/athena"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/glue"
	"github.com/aws/aws-sdk-go/service/kafka"
	"github.com/aws/aws-sdk-go/service/kinesis"
	"github.com/aws/aws-sdk-go/service/lambda"
	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/aws/aws-sdk-go/service/sns"
	"github.com/aws/aws-sdk-go/service/sqs"
	"github.com/aws/aws-sdk-go/service/ssm"
	"github.com/aws/aws-sdk-go/service/sts"
	"github.com/tzzh/pod-tzzh-aws/babashka"
)

type Config struct {
	Profile string
	Region  string
}

var SessionOptions = session.Options{}

func ProcessMessage(message *babashka.Message) (interface{}, error) {
	if message.Op == "describe" {
		response := &babashka.DescribeResponse{
			Format: "json",
			Namespaces: []babashka.Namespace{
				{Name: "pod.tzzh.paginator",
					Vars: []babashka.Var{
						{Name: "get-paginator",
							Code: `(defn get-paginator "Returns a fn that lazily fetches the pages for a given aws fn" [page-fn] (fn get-pages ([] (get-pages {})) ([input] (lazy-seq (let [page (page-fn input) next-continuation-token (:NextContinuationToken page) next-token (:NextToken page) next-marker (:NextMarker page)] (cond next-continuation-token (cons page (get-pages (assoc input :ContinuationToken next-continuation-token))) next-token (cons page (get-pages (assoc input :NextToken next-token))) next-marker (cons page (get-pages (assoc input :Marker next-marker))) :else [page]))))))`},
					},
				},
				{Name: "pod.tzzh.podconfig",
					Vars: []babashka.Var{
						{Name: "set-session-options"},
					},
				},
				{Name: "pod.tzzh.athena",
					Vars: []babashka.Var{
						{Name: "batch-get-named-query"},
						{Name: "batch-get-query-execution"},
						{Name: "create-data-catalog"},
						{Name: "create-named-query"},
						{Name: "create-work-group"},
						{Name: "delete-data-catalog"},
						{Name: "delete-named-query"},
						{Name: "delete-work-group"},
						{Name: "get-data-catalog"},
						{Name: "get-database"},
						{Name: "get-named-query"},
						{Name: "get-query-execution"},
						{Name: "get-query-results"},
						{Name: "get-table-metadata"},
						{Name: "get-work-group"},
						{Name: "list-data-catalogs"},
						{Name: "list-databases"},
						{Name: "list-named-queries"},
						{Name: "list-query-executions"},
						{Name: "list-table-metadata"},
						{Name: "list-tags-for-resource"},
						{Name: "list-work-groups"},
						{Name: "start-query-execution"},
						{Name: "stop-query-execution"},
						{Name: "tag-resource"},
						{Name: "untag-resource"},
						{Name: "update-data-catalog"},
						{Name: "update-work-group"},
					},
				},

				{Name: "pod.tzzh.dynamodb",
					Vars: []babashka.Var{
						{Name: "batch-get-item"},
						{Name: "batch-write-item"},
						{Name: "create-backup"},
						{Name: "create-global-table"},
						{Name: "create-table"},
						{Name: "delete-backup"},
						{Name: "delete-item"},
						{Name: "delete-table"},
						{Name: "describe-backup"},
						{Name: "describe-continuous-backups"},
						{Name: "describe-contributor-insights"},
						{Name: "describe-endpoints"},
						{Name: "describe-global-table"},
						{Name: "describe-global-table-settings"},
						{Name: "describe-limits"},
						{Name: "describe-table"},
						{Name: "describe-table-replica-auto-scaling"},
						{Name: "describe-time-to-live"},
						{Name: "get-item"},
						{Name: "list-backups"},
						{Name: "list-contributor-insights"},
						{Name: "list-global-tables"},
						{Name: "list-tables"},
						{Name: "list-tags-of-resource"},
						{Name: "put-item"},
						{Name: "query"},
						{Name: "restore-table-from-backup"},
						{Name: "restore-table-to-point-in-time"},
						{Name: "scan"},
						{Name: "tag-resource"},
						{Name: "transact-get-items"},
						{Name: "transact-write-items"},
						{Name: "untag-resource"},
						{Name: "update-continuous-backups"},
						{Name: "update-contributor-insights"},
						{Name: "update-global-table"},
						{Name: "update-global-table-settings"},
						{Name: "update-item"},
						{Name: "update-table"},
						{Name: "update-table-replica-auto-scaling"},
						{Name: "update-time-to-live"},
					},
				},

				{Name: "pod.tzzh.glue",
					Vars: []babashka.Var{
						{Name: "batch-create-partition"},
						{Name: "batch-delete-connection"},
						{Name: "batch-delete-partition"},
						{Name: "batch-delete-table"},
						{Name: "batch-delete-table-version"},
						{Name: "batch-get-crawlers"},
						{Name: "batch-get-dev-endpoints"},
						{Name: "batch-get-jobs"},
						{Name: "batch-get-partition"},
						{Name: "batch-get-triggers"},
						{Name: "batch-get-workflows"},
						{Name: "batch-stop-job-run"},
						{Name: "batch-update-partition"},
						{Name: "cancel-m-l-task-run"},
						{Name: "create-classifier"},
						{Name: "create-connection"},
						{Name: "create-crawler"},
						{Name: "create-database"},
						{Name: "create-dev-endpoint"},
						{Name: "create-job"},
						{Name: "create-m-l-transform"},
						{Name: "create-partition"},
						{Name: "create-script"},
						{Name: "create-security-configuration"},
						{Name: "create-table"},
						{Name: "create-trigger"},
						{Name: "create-user-defined-function"},
						{Name: "create-workflow"},
						{Name: "delete-classifier"},
						{Name: "delete-column-statistics-for-partition"},
						{Name: "delete-column-statistics-for-table"},
						{Name: "delete-connection"},
						{Name: "delete-crawler"},
						{Name: "delete-database"},
						{Name: "delete-dev-endpoint"},
						{Name: "delete-job"},
						{Name: "delete-m-l-transform"},
						{Name: "delete-partition"},
						{Name: "delete-resource-policy"},
						{Name: "delete-security-configuration"},
						{Name: "delete-table"},
						{Name: "delete-table-version"},
						{Name: "delete-trigger"},
						{Name: "delete-user-defined-function"},
						{Name: "delete-workflow"},
						{Name: "get-catalog-import-status"},
						{Name: "get-classifier"},
						{Name: "get-classifiers"},
						{Name: "get-column-statistics-for-partition"},
						{Name: "get-column-statistics-for-table"},
						{Name: "get-connection"},
						{Name: "get-connections"},
						{Name: "get-crawler"},
						{Name: "get-crawler-metrics"},
						{Name: "get-crawlers"},
						{Name: "get-data-catalog-encryption-settings"},
						{Name: "get-database"},
						{Name: "get-databases"},
						{Name: "get-dataflow-graph"},
						{Name: "get-dev-endpoint"},
						{Name: "get-dev-endpoints"},
						{Name: "get-job"},
						{Name: "get-job-bookmark"},
						{Name: "get-job-run"},
						{Name: "get-job-runs"},
						{Name: "get-jobs"},
						{Name: "get-m-l-task-run"},
						{Name: "get-m-l-task-runs"},
						{Name: "get-m-l-transform"},
						{Name: "get-m-l-transforms"},
						{Name: "get-mapping"},
						{Name: "get-partition"},
						{Name: "get-partition-indexes"},
						{Name: "get-partitions"},
						{Name: "get-plan"},
						{Name: "get-resource-policies"},
						{Name: "get-resource-policy"},
						{Name: "get-security-configuration"},
						{Name: "get-security-configurations"},
						{Name: "get-table"},
						{Name: "get-table-version"},
						{Name: "get-table-versions"},
						{Name: "get-tables"},
						{Name: "get-tags"},
						{Name: "get-trigger"},
						{Name: "get-triggers"},
						{Name: "get-user-defined-function"},
						{Name: "get-user-defined-functions"},
						{Name: "get-workflow"},
						{Name: "get-workflow-run"},
						{Name: "get-workflow-run-properties"},
						{Name: "get-workflow-runs"},
						{Name: "import-catalog-to-glue"},
						{Name: "list-crawlers"},
						{Name: "list-dev-endpoints"},
						{Name: "list-jobs"},
						{Name: "list-m-l-transforms"},
						{Name: "list-triggers"},
						{Name: "list-workflows"},
						{Name: "put-data-catalog-encryption-settings"},
						{Name: "put-resource-policy"},
						{Name: "put-workflow-run-properties"},
						{Name: "reset-job-bookmark"},
						{Name: "resume-workflow-run"},
						{Name: "search-tables"},
						{Name: "start-crawler"},
						{Name: "start-crawler-schedule"},
						{Name: "start-export-labels-task-run"},
						{Name: "start-import-labels-task-run"},
						{Name: "start-job-run"},
						{Name: "start-m-l-evaluation-task-run"},
						{Name: "start-m-l-labeling-set-generation-task-run"},
						{Name: "start-trigger"},
						{Name: "start-workflow-run"},
						{Name: "stop-crawler"},
						{Name: "stop-crawler-schedule"},
						{Name: "stop-trigger"},
						{Name: "stop-workflow-run"},
						{Name: "tag-resource"},
						{Name: "untag-resource"},
						{Name: "update-classifier"},
						{Name: "update-column-statistics-for-partition"},
						{Name: "update-column-statistics-for-table"},
						{Name: "update-connection"},
						{Name: "update-crawler"},
						{Name: "update-crawler-schedule"},
						{Name: "update-database"},
						{Name: "update-dev-endpoint"},
						{Name: "update-job"},
						{Name: "update-m-l-transform"},
						{Name: "update-partition"},
						{Name: "update-table"},
						{Name: "update-trigger"},
						{Name: "update-user-defined-function"},
						{Name: "update-workflow"},
					},
				},

				{Name: "pod.tzzh.kafka",
					Vars: []babashka.Var{
						{Name: "batch-associate-scram-secret"},
						{Name: "batch-disassociate-scram-secret"},
						{Name: "create-cluster"},
						{Name: "create-configuration"},
						{Name: "delete-cluster"},
						{Name: "delete-configuration"},
						{Name: "describe-cluster"},
						{Name: "describe-cluster-operation"},
						{Name: "describe-configuration"},
						{Name: "describe-configuration-revision"},
						{Name: "get-bootstrap-brokers"},
						{Name: "get-compatible-kafka-versions"},
						{Name: "list-cluster-operations"},
						{Name: "list-clusters"},
						{Name: "list-configuration-revisions"},
						{Name: "list-configurations"},
						{Name: "list-kafka-versions"},
						{Name: "list-nodes"},
						{Name: "list-scram-secrets"},
						{Name: "list-tags-for-resource"},
						{Name: "reboot-broker"},
						{Name: "tag-resource"},
						{Name: "untag-resource"},
						{Name: "update-broker-count"},
						{Name: "update-broker-storage"},
						{Name: "update-cluster-configuration"},
						{Name: "update-cluster-kafka-version"},
						{Name: "update-configuration"},
						{Name: "update-monitoring"},
					},
				},

				{Name: "pod.tzzh.kinesis",
					Vars: []babashka.Var{
						{Name: "add-tags-to-stream"},
						{Name: "create-stream"},
						{Name: "decrease-stream-retention-period"},
						{Name: "delete-stream"},
						{Name: "deregister-stream-consumer"},
						{Name: "describe-limits"},
						{Name: "describe-stream"},
						{Name: "describe-stream-consumer"},
						{Name: "describe-stream-summary"},
						{Name: "disable-enhanced-monitoring"},
						{Name: "enable-enhanced-monitoring"},
						{Name: "get-records"},
						{Name: "get-shard-iterator"},
						{Name: "increase-stream-retention-period"},
						{Name: "list-shards"},
						{Name: "list-stream-consumers"},
						{Name: "list-streams"},
						{Name: "list-tags-for-stream"},
						{Name: "merge-shards"},
						{Name: "put-record"},
						{Name: "put-records"},
						{Name: "register-stream-consumer"},
						{Name: "remove-tags-from-stream"},
						{Name: "split-shard"},
						{Name: "start-stream-encryption"},
						{Name: "stop-stream-encryption"},
						{Name: "subscribe-to-shard"},
						{Name: "update-shard-count"},
					},
				},

				{Name: "pod.tzzh.lambda",
					Vars: []babashka.Var{
						{Name: "add-layer-version-permission"},
						{Name: "add-permission"},
						{Name: "create-alias"},
						{Name: "create-event-source-mapping"},
						{Name: "create-function"},
						{Name: "delete-alias"},
						{Name: "delete-event-source-mapping"},
						{Name: "delete-function"},
						{Name: "delete-function-concurrency"},
						{Name: "delete-function-event-invoke-config"},
						{Name: "delete-layer-version"},
						{Name: "delete-provisioned-concurrency-config"},
						{Name: "get-account-settings"},
						{Name: "get-alias"},
						{Name: "get-event-source-mapping"},
						{Name: "get-function"},
						{Name: "get-function-concurrency"},
						{Name: "get-function-configuration"},
						{Name: "get-function-event-invoke-config"},
						{Name: "get-layer-version"},
						{Name: "get-layer-version-by-arn"},
						{Name: "get-layer-version-policy"},
						{Name: "get-policy"},
						{Name: "get-provisioned-concurrency-config"},
						{Name: "invoke"},
						{Name: "invoke-async"},
						{Name: "list-aliases"},
						{Name: "list-event-source-mappings"},
						{Name: "list-function-event-invoke-configs"},
						{Name: "list-functions"},
						{Name: "list-layer-versions"},
						{Name: "list-layers"},
						{Name: "list-provisioned-concurrency-configs"},
						{Name: "list-tags"},
						{Name: "list-versions-by-function"},
						{Name: "publish-layer-version"},
						{Name: "publish-version"},
						{Name: "put-function-concurrency"},
						{Name: "put-function-event-invoke-config"},
						{Name: "put-provisioned-concurrency-config"},
						{Name: "remove-layer-version-permission"},
						{Name: "remove-permission"},
						{Name: "tag-resource"},
						{Name: "untag-resource"},
						{Name: "update-alias"},
						{Name: "update-event-source-mapping"},
						{Name: "update-function-code"},
						{Name: "update-function-configuration"},
						{Name: "update-function-event-invoke-config"},
					},
				},

				{Name: "pod.tzzh.s3",
					Vars: []babashka.Var{
						{Name: "abort-multipart-upload"},
						{Name: "complete-multipart-upload"},
						{Name: "copy-object"},
						{Name: "create-bucket"},
						{Name: "create-multipart-upload"},
						{Name: "delete-bucket"},
						{Name: "delete-bucket-analytics-configuration"},
						{Name: "delete-bucket-cors"},
						{Name: "delete-bucket-encryption"},
						{Name: "delete-bucket-inventory-configuration"},
						{Name: "delete-bucket-lifecycle"},
						{Name: "delete-bucket-metrics-configuration"},
						{Name: "delete-bucket-policy"},
						{Name: "delete-bucket-replication"},
						{Name: "delete-bucket-tagging"},
						{Name: "delete-bucket-website"},
						{Name: "delete-object"},
						{Name: "delete-object-tagging"},
						{Name: "delete-objects"},
						{Name: "delete-public-access-block"},
						{Name: "get-bucket-accelerate-configuration"},
						{Name: "get-bucket-acl"},
						{Name: "get-bucket-analytics-configuration"},
						{Name: "get-bucket-cors"},
						{Name: "get-bucket-encryption"},
						{Name: "get-bucket-inventory-configuration"},
						{Name: "get-bucket-lifecycle"},
						{Name: "get-bucket-lifecycle-configuration"},
						{Name: "get-bucket-location"},
						{Name: "get-bucket-logging"},
						{Name: "get-bucket-metrics-configuration"},
						{Name: "get-bucket-policy"},
						{Name: "get-bucket-policy-status"},
						{Name: "get-bucket-replication"},
						{Name: "get-bucket-request-payment"},
						{Name: "get-bucket-tagging"},
						{Name: "get-bucket-versioning"},
						{Name: "get-bucket-website"},
						{Name: "get-object"},
						{Name: "get-object-acl"},
						{Name: "get-object-legal-hold"},
						{Name: "get-object-lock-configuration"},
						{Name: "get-object-retention"},
						{Name: "get-object-tagging"},
						{Name: "get-object-torrent"},
						{Name: "get-public-access-block"},
						{Name: "head-bucket"},
						{Name: "head-object"},
						{Name: "list-bucket-analytics-configurations"},
						{Name: "list-bucket-inventory-configurations"},
						{Name: "list-bucket-metrics-configurations"},
						{Name: "list-buckets"},
						{Name: "list-multipart-uploads"},
						{Name: "list-object-versions"},
						{Name: "list-objects"},
						{Name: "list-objects-v2"},
						{Name: "list-parts"},
						{Name: "put-bucket-accelerate-configuration"},
						{Name: "put-bucket-acl"},
						{Name: "put-bucket-analytics-configuration"},
						{Name: "put-bucket-cors"},
						{Name: "put-bucket-encryption"},
						{Name: "put-bucket-inventory-configuration"},
						{Name: "put-bucket-lifecycle"},
						{Name: "put-bucket-lifecycle-configuration"},
						{Name: "put-bucket-logging"},
						{Name: "put-bucket-metrics-configuration"},
						{Name: "put-bucket-notification"},
						{Name: "put-bucket-notification-configuration"},
						{Name: "put-bucket-policy"},
						{Name: "put-bucket-replication"},
						{Name: "put-bucket-request-payment"},
						{Name: "put-bucket-tagging"},
						{Name: "put-bucket-versioning"},
						{Name: "put-bucket-website"},
						{Name: "put-object"},
						{Name: "put-object-acl"},
						{Name: "put-object-legal-hold"},
						{Name: "put-object-lock-configuration"},
						{Name: "put-object-retention"},
						{Name: "put-object-tagging"},
						{Name: "put-public-access-block"},
						{Name: "restore-object"},
						{Name: "select-object-content"},
						{Name: "upload-part"},
						{Name: "upload-part-copy"},
					},
				},

				{Name: "pod.tzzh.sns",
					Vars: []babashka.Var{
						{Name: "add-permission"},
						{Name: "check-if-phone-number-is-opted-out"},
						{Name: "confirm-subscription"},
						{Name: "create-platform-application"},
						{Name: "create-platform-endpoint"},
						{Name: "create-topic"},
						{Name: "delete-endpoint"},
						{Name: "delete-platform-application"},
						{Name: "delete-topic"},
						{Name: "get-endpoint-attributes"},
						{Name: "get-platform-application-attributes"},
						{Name: "get-s-m-s-attributes"},
						{Name: "get-subscription-attributes"},
						{Name: "get-topic-attributes"},
						{Name: "list-endpoints-by-platform-application"},
						{Name: "list-phone-numbers-opted-out"},
						{Name: "list-platform-applications"},
						{Name: "list-subscriptions"},
						{Name: "list-subscriptions-by-topic"},
						{Name: "list-tags-for-resource"},
						{Name: "list-topics"},
						{Name: "opt-in-phone-number"},
						{Name: "publish"},
						{Name: "remove-permission"},
						{Name: "set-endpoint-attributes"},
						{Name: "set-platform-application-attributes"},
						{Name: "set-s-m-s-attributes"},
						{Name: "set-subscription-attributes"},
						{Name: "set-topic-attributes"},
						{Name: "subscribe"},
						{Name: "tag-resource"},
						{Name: "unsubscribe"},
						{Name: "untag-resource"},
					},
				},

				{Name: "pod.tzzh.sqs",
					Vars: []babashka.Var{
						{Name: "add-permission"},
						{Name: "change-message-visibility"},
						{Name: "change-message-visibility-batch"},
						{Name: "create-queue"},
						{Name: "delete-message"},
						{Name: "delete-message-batch"},
						{Name: "delete-queue"},
						{Name: "get-queue-attributes"},
						{Name: "get-queue-url"},
						{Name: "list-dead-letter-source-queues"},
						{Name: "list-queue-tags"},
						{Name: "list-queues"},
						{Name: "purge-queue"},
						{Name: "receive-message"},
						{Name: "remove-permission"},
						{Name: "send-message"},
						{Name: "send-message-batch"},
						{Name: "set-queue-attributes"},
						{Name: "tag-queue"},
						{Name: "untag-queue"},
					},
				},

				{Name: "pod.tzzh.ssm",
					Vars: []babashka.Var{
						{Name: "add-tags-to-resource"},
						{Name: "cancel-command"},
						{Name: "cancel-maintenance-window-execution"},
						{Name: "create-activation"},
						{Name: "create-association"},
						{Name: "create-association-batch"},
						{Name: "create-document"},
						{Name: "create-maintenance-window"},
						{Name: "create-ops-item"},
						{Name: "create-patch-baseline"},
						{Name: "create-resource-data-sync"},
						{Name: "delete-activation"},
						{Name: "delete-association"},
						{Name: "delete-document"},
						{Name: "delete-inventory"},
						{Name: "delete-maintenance-window"},
						{Name: "delete-parameter"},
						{Name: "delete-parameters"},
						{Name: "delete-patch-baseline"},
						{Name: "delete-resource-data-sync"},
						{Name: "deregister-managed-instance"},
						{Name: "deregister-patch-baseline-for-patch-group"},
						{Name: "deregister-target-from-maintenance-window"},
						{Name: "deregister-task-from-maintenance-window"},
						{Name: "describe-activations"},
						{Name: "describe-association"},
						{Name: "describe-association-execution-targets"},
						{Name: "describe-association-executions"},
						{Name: "describe-automation-executions"},
						{Name: "describe-automation-step-executions"},
						{Name: "describe-available-patches"},
						{Name: "describe-document"},
						{Name: "describe-document-permission"},
						{Name: "describe-effective-instance-associations"},
						{Name: "describe-effective-patches-for-patch-baseline"},
						{Name: "describe-instance-associations-status"},
						{Name: "describe-instance-information"},
						{Name: "describe-instance-patch-states"},
						{Name: "describe-instance-patch-states-for-patch-group"},
						{Name: "describe-instance-patches"},
						{Name: "describe-inventory-deletions"},
						{Name: "describe-maintenance-window-execution-task-invocations"},
						{Name: "describe-maintenance-window-execution-tasks"},
						{Name: "describe-maintenance-window-executions"},
						{Name: "describe-maintenance-window-schedule"},
						{Name: "describe-maintenance-window-targets"},
						{Name: "describe-maintenance-window-tasks"},
						{Name: "describe-maintenance-windows"},
						{Name: "describe-maintenance-windows-for-target"},
						{Name: "describe-ops-items"},
						{Name: "describe-parameters"},
						{Name: "describe-patch-baselines"},
						{Name: "describe-patch-group-state"},
						{Name: "describe-patch-groups"},
						{Name: "describe-patch-properties"},
						{Name: "describe-sessions"},
						{Name: "get-automation-execution"},
						{Name: "get-calendar-state"},
						{Name: "get-command-invocation"},
						{Name: "get-connection-status"},
						{Name: "get-default-patch-baseline"},
						{Name: "get-deployable-patch-snapshot-for-instance"},
						{Name: "get-document"},
						{Name: "get-inventory"},
						{Name: "get-inventory-schema"},
						{Name: "get-maintenance-window"},
						{Name: "get-maintenance-window-execution"},
						{Name: "get-maintenance-window-execution-task"},
						{Name: "get-maintenance-window-execution-task-invocation"},
						{Name: "get-maintenance-window-task"},
						{Name: "get-ops-item"},
						{Name: "get-ops-summary"},
						{Name: "get-parameter"},
						{Name: "get-parameter-history"},
						{Name: "get-parameters"},
						{Name: "get-parameters-by-path"},
						{Name: "get-patch-baseline"},
						{Name: "get-patch-baseline-for-patch-group"},
						{Name: "get-service-setting"},
						{Name: "label-parameter-version"},
						{Name: "list-association-versions"},
						{Name: "list-associations"},
						{Name: "list-command-invocations"},
						{Name: "list-commands"},
						{Name: "list-compliance-items"},
						{Name: "list-compliance-summaries"},
						{Name: "list-document-versions"},
						{Name: "list-documents"},
						{Name: "list-inventory-entries"},
						{Name: "list-resource-compliance-summaries"},
						{Name: "list-resource-data-sync"},
						{Name: "list-tags-for-resource"},
						{Name: "modify-document-permission"},
						{Name: "put-compliance-items"},
						{Name: "put-inventory"},
						{Name: "put-parameter"},
						{Name: "register-default-patch-baseline"},
						{Name: "register-patch-baseline-for-patch-group"},
						{Name: "register-target-with-maintenance-window"},
						{Name: "register-task-with-maintenance-window"},
						{Name: "remove-tags-from-resource"},
						{Name: "reset-service-setting"},
						{Name: "resume-session"},
						{Name: "send-automation-signal"},
						{Name: "send-command"},
						{Name: "start-associations-once"},
						{Name: "start-automation-execution"},
						{Name: "start-session"},
						{Name: "stop-automation-execution"},
						{Name: "terminate-session"},
						{Name: "update-association"},
						{Name: "update-association-status"},
						{Name: "update-document"},
						{Name: "update-document-default-version"},
						{Name: "update-maintenance-window"},
						{Name: "update-maintenance-window-target"},
						{Name: "update-maintenance-window-task"},
						{Name: "update-managed-instance-role"},
						{Name: "update-ops-item"},
						{Name: "update-patch-baseline"},
						{Name: "update-resource-data-sync"},
						{Name: "update-service-setting"},
					},
				},

				{Name: "pod.tzzh.sts",
					Vars: []babashka.Var{
						{Name: "assume-role"},
						{Name: "assume-role-with-s-a-m-l"},
						{Name: "assume-role-with-web-identity"},
						{Name: "decode-authorization-message"},
						{Name: "get-access-key-info"},
						{Name: "get-caller-identity"},
						{Name: "get-federation-token"},
						{Name: "get-session-token"},
					},
				},
			},
		}
		return response, nil

	} else if message.Op == "invoke" {
		switch message.Var {
		case "pod.tzzh.podconfig/set-session-options":
			var cfg []Config
			err := json.Unmarshal([]byte(message.Args), &cfg)
			if err != nil {
				return nil, err
			}
			SessionOptions = session.Options{
				Config: aws.Config{
					Region: aws.String(cfg[0].Region),
				},
				Profile:           cfg[0].Profile,
				SharedConfigState: session.SharedConfigEnable,
			}
			return cfg[0], nil
		case "pod.tzzh.athena/batch-get-named-query":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.BatchGetNamedQueryInput{}
			inputList := []athena.BatchGetNamedQueryInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchGetNamedQuery(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/batch-get-query-execution":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.BatchGetQueryExecutionInput{}
			inputList := []athena.BatchGetQueryExecutionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchGetQueryExecution(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/create-data-catalog":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.CreateDataCatalogInput{}
			inputList := []athena.CreateDataCatalogInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateDataCatalog(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/create-named-query":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.CreateNamedQueryInput{}
			inputList := []athena.CreateNamedQueryInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateNamedQuery(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/create-work-group":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.CreateWorkGroupInput{}
			inputList := []athena.CreateWorkGroupInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateWorkGroup(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/delete-data-catalog":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.DeleteDataCatalogInput{}
			inputList := []athena.DeleteDataCatalogInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteDataCatalog(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/delete-named-query":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.DeleteNamedQueryInput{}
			inputList := []athena.DeleteNamedQueryInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteNamedQuery(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/delete-work-group":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.DeleteWorkGroupInput{}
			inputList := []athena.DeleteWorkGroupInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteWorkGroup(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/get-data-catalog":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.GetDataCatalogInput{}
			inputList := []athena.GetDataCatalogInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetDataCatalog(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/get-database":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.GetDatabaseInput{}
			inputList := []athena.GetDatabaseInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetDatabase(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/get-named-query":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.GetNamedQueryInput{}
			inputList := []athena.GetNamedQueryInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetNamedQuery(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/get-query-execution":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.GetQueryExecutionInput{}
			inputList := []athena.GetQueryExecutionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetQueryExecution(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/get-query-results":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.GetQueryResultsInput{}
			inputList := []athena.GetQueryResultsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetQueryResults(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/get-table-metadata":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.GetTableMetadataInput{}
			inputList := []athena.GetTableMetadataInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetTableMetadata(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/get-work-group":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.GetWorkGroupInput{}
			inputList := []athena.GetWorkGroupInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetWorkGroup(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/list-data-catalogs":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.ListDataCatalogsInput{}
			inputList := []athena.ListDataCatalogsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListDataCatalogs(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/list-databases":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.ListDatabasesInput{}
			inputList := []athena.ListDatabasesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListDatabases(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/list-named-queries":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.ListNamedQueriesInput{}
			inputList := []athena.ListNamedQueriesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListNamedQueries(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/list-query-executions":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.ListQueryExecutionsInput{}
			inputList := []athena.ListQueryExecutionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListQueryExecutions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/list-table-metadata":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.ListTableMetadataInput{}
			inputList := []athena.ListTableMetadataInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListTableMetadata(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/list-tags-for-resource":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.ListTagsForResourceInput{}
			inputList := []athena.ListTagsForResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListTagsForResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/list-work-groups":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.ListWorkGroupsInput{}
			inputList := []athena.ListWorkGroupsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListWorkGroups(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/start-query-execution":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.StartQueryExecutionInput{}
			inputList := []athena.StartQueryExecutionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StartQueryExecution(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/stop-query-execution":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.StopQueryExecutionInput{}
			inputList := []athena.StopQueryExecutionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StopQueryExecution(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/tag-resource":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.TagResourceInput{}
			inputList := []athena.TagResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.TagResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/untag-resource":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.UntagResourceInput{}
			inputList := []athena.UntagResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UntagResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/update-data-catalog":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.UpdateDataCatalogInput{}
			inputList := []athena.UpdateDataCatalogInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateDataCatalog(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.athena/update-work-group":
			svc := athena.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &athena.UpdateWorkGroupInput{}
			inputList := []athena.UpdateWorkGroupInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateWorkGroup(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/batch-get-item":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.BatchGetItemInput{}
			inputList := []dynamodb.BatchGetItemInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchGetItem(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/batch-write-item":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.BatchWriteItemInput{}
			inputList := []dynamodb.BatchWriteItemInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchWriteItem(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/create-backup":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.CreateBackupInput{}
			inputList := []dynamodb.CreateBackupInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateBackup(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/create-global-table":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.CreateGlobalTableInput{}
			inputList := []dynamodb.CreateGlobalTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateGlobalTable(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/create-table":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.CreateTableInput{}
			inputList := []dynamodb.CreateTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateTable(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/delete-backup":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.DeleteBackupInput{}
			inputList := []dynamodb.DeleteBackupInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteBackup(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/delete-item":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.DeleteItemInput{}
			inputList := []dynamodb.DeleteItemInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteItem(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/delete-table":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.DeleteTableInput{}
			inputList := []dynamodb.DeleteTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteTable(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/describe-backup":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.DescribeBackupInput{}
			inputList := []dynamodb.DescribeBackupInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeBackup(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/describe-continuous-backups":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.DescribeContinuousBackupsInput{}
			inputList := []dynamodb.DescribeContinuousBackupsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeContinuousBackups(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/describe-contributor-insights":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.DescribeContributorInsightsInput{}
			inputList := []dynamodb.DescribeContributorInsightsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeContributorInsights(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/describe-endpoints":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.DescribeEndpointsInput{}
			inputList := []dynamodb.DescribeEndpointsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeEndpoints(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/describe-global-table":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.DescribeGlobalTableInput{}
			inputList := []dynamodb.DescribeGlobalTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeGlobalTable(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/describe-global-table-settings":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.DescribeGlobalTableSettingsInput{}
			inputList := []dynamodb.DescribeGlobalTableSettingsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeGlobalTableSettings(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/describe-limits":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.DescribeLimitsInput{}
			inputList := []dynamodb.DescribeLimitsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeLimits(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/describe-table":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.DescribeTableInput{}
			inputList := []dynamodb.DescribeTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeTable(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/describe-table-replica-auto-scaling":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.DescribeTableReplicaAutoScalingInput{}
			inputList := []dynamodb.DescribeTableReplicaAutoScalingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeTableReplicaAutoScaling(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/describe-time-to-live":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.DescribeTimeToLiveInput{}
			inputList := []dynamodb.DescribeTimeToLiveInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeTimeToLive(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/get-item":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.GetItemInput{}
			inputList := []dynamodb.GetItemInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetItem(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/list-backups":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.ListBackupsInput{}
			inputList := []dynamodb.ListBackupsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListBackups(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/list-contributor-insights":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.ListContributorInsightsInput{}
			inputList := []dynamodb.ListContributorInsightsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListContributorInsights(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/list-global-tables":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.ListGlobalTablesInput{}
			inputList := []dynamodb.ListGlobalTablesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListGlobalTables(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/list-tables":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.ListTablesInput{}
			inputList := []dynamodb.ListTablesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListTables(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/list-tags-of-resource":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.ListTagsOfResourceInput{}
			inputList := []dynamodb.ListTagsOfResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListTagsOfResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/put-item":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.PutItemInput{}
			inputList := []dynamodb.PutItemInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutItem(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/query":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.QueryInput{}
			inputList := []dynamodb.QueryInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.Query(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/restore-table-from-backup":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.RestoreTableFromBackupInput{}
			inputList := []dynamodb.RestoreTableFromBackupInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.RestoreTableFromBackup(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/restore-table-to-point-in-time":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.RestoreTableToPointInTimeInput{}
			inputList := []dynamodb.RestoreTableToPointInTimeInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.RestoreTableToPointInTime(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/scan":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.ScanInput{}
			inputList := []dynamodb.ScanInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.Scan(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/tag-resource":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.TagResourceInput{}
			inputList := []dynamodb.TagResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.TagResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/transact-get-items":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.TransactGetItemsInput{}
			inputList := []dynamodb.TransactGetItemsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.TransactGetItems(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/transact-write-items":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.TransactWriteItemsInput{}
			inputList := []dynamodb.TransactWriteItemsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.TransactWriteItems(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/untag-resource":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.UntagResourceInput{}
			inputList := []dynamodb.UntagResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UntagResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/update-continuous-backups":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.UpdateContinuousBackupsInput{}
			inputList := []dynamodb.UpdateContinuousBackupsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateContinuousBackups(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/update-contributor-insights":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.UpdateContributorInsightsInput{}
			inputList := []dynamodb.UpdateContributorInsightsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateContributorInsights(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/update-global-table":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.UpdateGlobalTableInput{}
			inputList := []dynamodb.UpdateGlobalTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateGlobalTable(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/update-global-table-settings":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.UpdateGlobalTableSettingsInput{}
			inputList := []dynamodb.UpdateGlobalTableSettingsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateGlobalTableSettings(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/update-item":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.UpdateItemInput{}
			inputList := []dynamodb.UpdateItemInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateItem(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/update-table":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.UpdateTableInput{}
			inputList := []dynamodb.UpdateTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateTable(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/update-table-replica-auto-scaling":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.UpdateTableReplicaAutoScalingInput{}
			inputList := []dynamodb.UpdateTableReplicaAutoScalingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateTableReplicaAutoScaling(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.dynamodb/update-time-to-live":
			svc := dynamodb.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &dynamodb.UpdateTimeToLiveInput{}
			inputList := []dynamodb.UpdateTimeToLiveInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateTimeToLive(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/batch-create-partition":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.BatchCreatePartitionInput{}
			inputList := []glue.BatchCreatePartitionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchCreatePartition(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/batch-delete-connection":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.BatchDeleteConnectionInput{}
			inputList := []glue.BatchDeleteConnectionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchDeleteConnection(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/batch-delete-partition":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.BatchDeletePartitionInput{}
			inputList := []glue.BatchDeletePartitionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchDeletePartition(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/batch-delete-table":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.BatchDeleteTableInput{}
			inputList := []glue.BatchDeleteTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchDeleteTable(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/batch-delete-table-version":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.BatchDeleteTableVersionInput{}
			inputList := []glue.BatchDeleteTableVersionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchDeleteTableVersion(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/batch-get-crawlers":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.BatchGetCrawlersInput{}
			inputList := []glue.BatchGetCrawlersInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchGetCrawlers(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/batch-get-dev-endpoints":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.BatchGetDevEndpointsInput{}
			inputList := []glue.BatchGetDevEndpointsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchGetDevEndpoints(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/batch-get-jobs":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.BatchGetJobsInput{}
			inputList := []glue.BatchGetJobsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchGetJobs(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/batch-get-partition":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.BatchGetPartitionInput{}
			inputList := []glue.BatchGetPartitionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchGetPartition(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/batch-get-triggers":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.BatchGetTriggersInput{}
			inputList := []glue.BatchGetTriggersInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchGetTriggers(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/batch-get-workflows":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.BatchGetWorkflowsInput{}
			inputList := []glue.BatchGetWorkflowsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchGetWorkflows(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/batch-stop-job-run":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.BatchStopJobRunInput{}
			inputList := []glue.BatchStopJobRunInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchStopJobRun(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/batch-update-partition":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.BatchUpdatePartitionInput{}
			inputList := []glue.BatchUpdatePartitionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchUpdatePartition(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/cancel-m-l-task-run":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.CancelMLTaskRunInput{}
			inputList := []glue.CancelMLTaskRunInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CancelMLTaskRun(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/create-classifier":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.CreateClassifierInput{}
			inputList := []glue.CreateClassifierInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateClassifier(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/create-connection":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.CreateConnectionInput{}
			inputList := []glue.CreateConnectionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateConnection(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/create-crawler":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.CreateCrawlerInput{}
			inputList := []glue.CreateCrawlerInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateCrawler(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/create-database":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.CreateDatabaseInput{}
			inputList := []glue.CreateDatabaseInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateDatabase(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/create-dev-endpoint":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.CreateDevEndpointInput{}
			inputList := []glue.CreateDevEndpointInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateDevEndpoint(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/create-job":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.CreateJobInput{}
			inputList := []glue.CreateJobInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateJob(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/create-m-l-transform":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.CreateMLTransformInput{}
			inputList := []glue.CreateMLTransformInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateMLTransform(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/create-partition":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.CreatePartitionInput{}
			inputList := []glue.CreatePartitionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreatePartition(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/create-script":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.CreateScriptInput{}
			inputList := []glue.CreateScriptInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateScript(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/create-security-configuration":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.CreateSecurityConfigurationInput{}
			inputList := []glue.CreateSecurityConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateSecurityConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/create-table":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.CreateTableInput{}
			inputList := []glue.CreateTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateTable(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/create-trigger":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.CreateTriggerInput{}
			inputList := []glue.CreateTriggerInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateTrigger(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/create-user-defined-function":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.CreateUserDefinedFunctionInput{}
			inputList := []glue.CreateUserDefinedFunctionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateUserDefinedFunction(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/create-workflow":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.CreateWorkflowInput{}
			inputList := []glue.CreateWorkflowInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateWorkflow(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/delete-classifier":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.DeleteClassifierInput{}
			inputList := []glue.DeleteClassifierInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteClassifier(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/delete-column-statistics-for-partition":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.DeleteColumnStatisticsForPartitionInput{}
			inputList := []glue.DeleteColumnStatisticsForPartitionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteColumnStatisticsForPartition(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/delete-column-statistics-for-table":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.DeleteColumnStatisticsForTableInput{}
			inputList := []glue.DeleteColumnStatisticsForTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteColumnStatisticsForTable(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/delete-connection":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.DeleteConnectionInput{}
			inputList := []glue.DeleteConnectionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteConnection(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/delete-crawler":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.DeleteCrawlerInput{}
			inputList := []glue.DeleteCrawlerInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteCrawler(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/delete-database":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.DeleteDatabaseInput{}
			inputList := []glue.DeleteDatabaseInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteDatabase(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/delete-dev-endpoint":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.DeleteDevEndpointInput{}
			inputList := []glue.DeleteDevEndpointInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteDevEndpoint(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/delete-job":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.DeleteJobInput{}
			inputList := []glue.DeleteJobInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteJob(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/delete-m-l-transform":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.DeleteMLTransformInput{}
			inputList := []glue.DeleteMLTransformInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteMLTransform(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/delete-partition":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.DeletePartitionInput{}
			inputList := []glue.DeletePartitionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeletePartition(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/delete-resource-policy":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.DeleteResourcePolicyInput{}
			inputList := []glue.DeleteResourcePolicyInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteResourcePolicy(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/delete-security-configuration":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.DeleteSecurityConfigurationInput{}
			inputList := []glue.DeleteSecurityConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteSecurityConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/delete-table":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.DeleteTableInput{}
			inputList := []glue.DeleteTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteTable(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/delete-table-version":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.DeleteTableVersionInput{}
			inputList := []glue.DeleteTableVersionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteTableVersion(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/delete-trigger":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.DeleteTriggerInput{}
			inputList := []glue.DeleteTriggerInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteTrigger(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/delete-user-defined-function":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.DeleteUserDefinedFunctionInput{}
			inputList := []glue.DeleteUserDefinedFunctionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteUserDefinedFunction(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/delete-workflow":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.DeleteWorkflowInput{}
			inputList := []glue.DeleteWorkflowInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteWorkflow(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-catalog-import-status":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetCatalogImportStatusInput{}
			inputList := []glue.GetCatalogImportStatusInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetCatalogImportStatus(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-classifier":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetClassifierInput{}
			inputList := []glue.GetClassifierInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetClassifier(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-classifiers":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetClassifiersInput{}
			inputList := []glue.GetClassifiersInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetClassifiers(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-column-statistics-for-partition":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetColumnStatisticsForPartitionInput{}
			inputList := []glue.GetColumnStatisticsForPartitionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetColumnStatisticsForPartition(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-column-statistics-for-table":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetColumnStatisticsForTableInput{}
			inputList := []glue.GetColumnStatisticsForTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetColumnStatisticsForTable(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-connection":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetConnectionInput{}
			inputList := []glue.GetConnectionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetConnection(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-connections":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetConnectionsInput{}
			inputList := []glue.GetConnectionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetConnections(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-crawler":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetCrawlerInput{}
			inputList := []glue.GetCrawlerInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetCrawler(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-crawler-metrics":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetCrawlerMetricsInput{}
			inputList := []glue.GetCrawlerMetricsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetCrawlerMetrics(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-crawlers":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetCrawlersInput{}
			inputList := []glue.GetCrawlersInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetCrawlers(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-data-catalog-encryption-settings":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetDataCatalogEncryptionSettingsInput{}
			inputList := []glue.GetDataCatalogEncryptionSettingsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetDataCatalogEncryptionSettings(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-database":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetDatabaseInput{}
			inputList := []glue.GetDatabaseInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetDatabase(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-databases":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetDatabasesInput{}
			inputList := []glue.GetDatabasesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetDatabases(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-dataflow-graph":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetDataflowGraphInput{}
			inputList := []glue.GetDataflowGraphInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetDataflowGraph(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-dev-endpoint":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetDevEndpointInput{}
			inputList := []glue.GetDevEndpointInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetDevEndpoint(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-dev-endpoints":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetDevEndpointsInput{}
			inputList := []glue.GetDevEndpointsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetDevEndpoints(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-job":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetJobInput{}
			inputList := []glue.GetJobInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetJob(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-job-bookmark":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetJobBookmarkInput{}
			inputList := []glue.GetJobBookmarkInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetJobBookmark(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-job-run":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetJobRunInput{}
			inputList := []glue.GetJobRunInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetJobRun(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-job-runs":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetJobRunsInput{}
			inputList := []glue.GetJobRunsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetJobRuns(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-jobs":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetJobsInput{}
			inputList := []glue.GetJobsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetJobs(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-m-l-task-run":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetMLTaskRunInput{}
			inputList := []glue.GetMLTaskRunInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetMLTaskRun(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-m-l-task-runs":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetMLTaskRunsInput{}
			inputList := []glue.GetMLTaskRunsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetMLTaskRuns(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-m-l-transform":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetMLTransformInput{}
			inputList := []glue.GetMLTransformInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetMLTransform(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-m-l-transforms":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetMLTransformsInput{}
			inputList := []glue.GetMLTransformsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetMLTransforms(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-mapping":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetMappingInput{}
			inputList := []glue.GetMappingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetMapping(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-partition":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetPartitionInput{}
			inputList := []glue.GetPartitionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetPartition(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-partition-indexes":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetPartitionIndexesInput{}
			inputList := []glue.GetPartitionIndexesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetPartitionIndexes(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-partitions":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetPartitionsInput{}
			inputList := []glue.GetPartitionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetPartitions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-plan":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetPlanInput{}
			inputList := []glue.GetPlanInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetPlan(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-resource-policies":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetResourcePoliciesInput{}
			inputList := []glue.GetResourcePoliciesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetResourcePolicies(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-resource-policy":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetResourcePolicyInput{}
			inputList := []glue.GetResourcePolicyInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetResourcePolicy(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-security-configuration":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetSecurityConfigurationInput{}
			inputList := []glue.GetSecurityConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetSecurityConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-security-configurations":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetSecurityConfigurationsInput{}
			inputList := []glue.GetSecurityConfigurationsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetSecurityConfigurations(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-table":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetTableInput{}
			inputList := []glue.GetTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetTable(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-table-version":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetTableVersionInput{}
			inputList := []glue.GetTableVersionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetTableVersion(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-table-versions":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetTableVersionsInput{}
			inputList := []glue.GetTableVersionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetTableVersions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-tables":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetTablesInput{}
			inputList := []glue.GetTablesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetTables(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-tags":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetTagsInput{}
			inputList := []glue.GetTagsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetTags(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-trigger":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetTriggerInput{}
			inputList := []glue.GetTriggerInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetTrigger(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-triggers":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetTriggersInput{}
			inputList := []glue.GetTriggersInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetTriggers(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-user-defined-function":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetUserDefinedFunctionInput{}
			inputList := []glue.GetUserDefinedFunctionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetUserDefinedFunction(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-user-defined-functions":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetUserDefinedFunctionsInput{}
			inputList := []glue.GetUserDefinedFunctionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetUserDefinedFunctions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-workflow":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetWorkflowInput{}
			inputList := []glue.GetWorkflowInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetWorkflow(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-workflow-run":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetWorkflowRunInput{}
			inputList := []glue.GetWorkflowRunInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetWorkflowRun(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-workflow-run-properties":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetWorkflowRunPropertiesInput{}
			inputList := []glue.GetWorkflowRunPropertiesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetWorkflowRunProperties(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/get-workflow-runs":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.GetWorkflowRunsInput{}
			inputList := []glue.GetWorkflowRunsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetWorkflowRuns(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/import-catalog-to-glue":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.ImportCatalogToGlueInput{}
			inputList := []glue.ImportCatalogToGlueInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ImportCatalogToGlue(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/list-crawlers":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.ListCrawlersInput{}
			inputList := []glue.ListCrawlersInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListCrawlers(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/list-dev-endpoints":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.ListDevEndpointsInput{}
			inputList := []glue.ListDevEndpointsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListDevEndpoints(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/list-jobs":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.ListJobsInput{}
			inputList := []glue.ListJobsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListJobs(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/list-m-l-transforms":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.ListMLTransformsInput{}
			inputList := []glue.ListMLTransformsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListMLTransforms(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/list-triggers":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.ListTriggersInput{}
			inputList := []glue.ListTriggersInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListTriggers(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/list-workflows":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.ListWorkflowsInput{}
			inputList := []glue.ListWorkflowsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListWorkflows(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/put-data-catalog-encryption-settings":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.PutDataCatalogEncryptionSettingsInput{}
			inputList := []glue.PutDataCatalogEncryptionSettingsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutDataCatalogEncryptionSettings(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/put-resource-policy":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.PutResourcePolicyInput{}
			inputList := []glue.PutResourcePolicyInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutResourcePolicy(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/put-workflow-run-properties":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.PutWorkflowRunPropertiesInput{}
			inputList := []glue.PutWorkflowRunPropertiesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutWorkflowRunProperties(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/reset-job-bookmark":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.ResetJobBookmarkInput{}
			inputList := []glue.ResetJobBookmarkInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ResetJobBookmark(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/resume-workflow-run":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.ResumeWorkflowRunInput{}
			inputList := []glue.ResumeWorkflowRunInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ResumeWorkflowRun(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/search-tables":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.SearchTablesInput{}
			inputList := []glue.SearchTablesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.SearchTables(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/start-crawler":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.StartCrawlerInput{}
			inputList := []glue.StartCrawlerInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StartCrawler(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/start-crawler-schedule":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.StartCrawlerScheduleInput{}
			inputList := []glue.StartCrawlerScheduleInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StartCrawlerSchedule(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/start-export-labels-task-run":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.StartExportLabelsTaskRunInput{}
			inputList := []glue.StartExportLabelsTaskRunInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StartExportLabelsTaskRun(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/start-import-labels-task-run":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.StartImportLabelsTaskRunInput{}
			inputList := []glue.StartImportLabelsTaskRunInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StartImportLabelsTaskRun(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/start-job-run":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.StartJobRunInput{}
			inputList := []glue.StartJobRunInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StartJobRun(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/start-m-l-evaluation-task-run":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.StartMLEvaluationTaskRunInput{}
			inputList := []glue.StartMLEvaluationTaskRunInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StartMLEvaluationTaskRun(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/start-m-l-labeling-set-generation-task-run":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.StartMLLabelingSetGenerationTaskRunInput{}
			inputList := []glue.StartMLLabelingSetGenerationTaskRunInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StartMLLabelingSetGenerationTaskRun(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/start-trigger":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.StartTriggerInput{}
			inputList := []glue.StartTriggerInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StartTrigger(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/start-workflow-run":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.StartWorkflowRunInput{}
			inputList := []glue.StartWorkflowRunInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StartWorkflowRun(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/stop-crawler":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.StopCrawlerInput{}
			inputList := []glue.StopCrawlerInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StopCrawler(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/stop-crawler-schedule":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.StopCrawlerScheduleInput{}
			inputList := []glue.StopCrawlerScheduleInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StopCrawlerSchedule(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/stop-trigger":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.StopTriggerInput{}
			inputList := []glue.StopTriggerInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StopTrigger(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/stop-workflow-run":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.StopWorkflowRunInput{}
			inputList := []glue.StopWorkflowRunInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StopWorkflowRun(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/tag-resource":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.TagResourceInput{}
			inputList := []glue.TagResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.TagResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/untag-resource":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.UntagResourceInput{}
			inputList := []glue.UntagResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UntagResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/update-classifier":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.UpdateClassifierInput{}
			inputList := []glue.UpdateClassifierInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateClassifier(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/update-column-statistics-for-partition":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.UpdateColumnStatisticsForPartitionInput{}
			inputList := []glue.UpdateColumnStatisticsForPartitionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateColumnStatisticsForPartition(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/update-column-statistics-for-table":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.UpdateColumnStatisticsForTableInput{}
			inputList := []glue.UpdateColumnStatisticsForTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateColumnStatisticsForTable(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/update-connection":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.UpdateConnectionInput{}
			inputList := []glue.UpdateConnectionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateConnection(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/update-crawler":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.UpdateCrawlerInput{}
			inputList := []glue.UpdateCrawlerInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateCrawler(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/update-crawler-schedule":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.UpdateCrawlerScheduleInput{}
			inputList := []glue.UpdateCrawlerScheduleInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateCrawlerSchedule(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/update-database":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.UpdateDatabaseInput{}
			inputList := []glue.UpdateDatabaseInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateDatabase(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/update-dev-endpoint":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.UpdateDevEndpointInput{}
			inputList := []glue.UpdateDevEndpointInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateDevEndpoint(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/update-job":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.UpdateJobInput{}
			inputList := []glue.UpdateJobInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateJob(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/update-m-l-transform":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.UpdateMLTransformInput{}
			inputList := []glue.UpdateMLTransformInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateMLTransform(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/update-partition":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.UpdatePartitionInput{}
			inputList := []glue.UpdatePartitionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdatePartition(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/update-table":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.UpdateTableInput{}
			inputList := []glue.UpdateTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateTable(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/update-trigger":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.UpdateTriggerInput{}
			inputList := []glue.UpdateTriggerInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateTrigger(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/update-user-defined-function":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.UpdateUserDefinedFunctionInput{}
			inputList := []glue.UpdateUserDefinedFunctionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateUserDefinedFunction(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.glue/update-workflow":
			svc := glue.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &glue.UpdateWorkflowInput{}
			inputList := []glue.UpdateWorkflowInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateWorkflow(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/batch-associate-scram-secret":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.BatchAssociateScramSecretInput{}
			inputList := []kafka.BatchAssociateScramSecretInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchAssociateScramSecret(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/batch-disassociate-scram-secret":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.BatchDisassociateScramSecretInput{}
			inputList := []kafka.BatchDisassociateScramSecretInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.BatchDisassociateScramSecret(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/create-cluster":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.CreateClusterInput{}
			inputList := []kafka.CreateClusterInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateCluster(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/create-configuration":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.CreateConfigurationInput{}
			inputList := []kafka.CreateConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/delete-cluster":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.DeleteClusterInput{}
			inputList := []kafka.DeleteClusterInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteCluster(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/delete-configuration":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.DeleteConfigurationInput{}
			inputList := []kafka.DeleteConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/describe-cluster":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.DescribeClusterInput{}
			inputList := []kafka.DescribeClusterInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeCluster(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/describe-cluster-operation":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.DescribeClusterOperationInput{}
			inputList := []kafka.DescribeClusterOperationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeClusterOperation(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/describe-configuration":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.DescribeConfigurationInput{}
			inputList := []kafka.DescribeConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/describe-configuration-revision":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.DescribeConfigurationRevisionInput{}
			inputList := []kafka.DescribeConfigurationRevisionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeConfigurationRevision(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/get-bootstrap-brokers":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.GetBootstrapBrokersInput{}
			inputList := []kafka.GetBootstrapBrokersInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBootstrapBrokers(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/get-compatible-kafka-versions":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.GetCompatibleKafkaVersionsInput{}
			inputList := []kafka.GetCompatibleKafkaVersionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetCompatibleKafkaVersions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/list-cluster-operations":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.ListClusterOperationsInput{}
			inputList := []kafka.ListClusterOperationsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListClusterOperations(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/list-clusters":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.ListClustersInput{}
			inputList := []kafka.ListClustersInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListClusters(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/list-configuration-revisions":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.ListConfigurationRevisionsInput{}
			inputList := []kafka.ListConfigurationRevisionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListConfigurationRevisions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/list-configurations":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.ListConfigurationsInput{}
			inputList := []kafka.ListConfigurationsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListConfigurations(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/list-kafka-versions":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.ListKafkaVersionsInput{}
			inputList := []kafka.ListKafkaVersionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListKafkaVersions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/list-nodes":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.ListNodesInput{}
			inputList := []kafka.ListNodesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListNodes(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/list-scram-secrets":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.ListScramSecretsInput{}
			inputList := []kafka.ListScramSecretsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListScramSecrets(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/list-tags-for-resource":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.ListTagsForResourceInput{}
			inputList := []kafka.ListTagsForResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListTagsForResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/reboot-broker":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.RebootBrokerInput{}
			inputList := []kafka.RebootBrokerInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.RebootBroker(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/tag-resource":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.TagResourceInput{}
			inputList := []kafka.TagResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.TagResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/untag-resource":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.UntagResourceInput{}
			inputList := []kafka.UntagResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UntagResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/update-broker-count":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.UpdateBrokerCountInput{}
			inputList := []kafka.UpdateBrokerCountInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateBrokerCount(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/update-broker-storage":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.UpdateBrokerStorageInput{}
			inputList := []kafka.UpdateBrokerStorageInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateBrokerStorage(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/update-cluster-configuration":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.UpdateClusterConfigurationInput{}
			inputList := []kafka.UpdateClusterConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateClusterConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/update-cluster-kafka-version":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.UpdateClusterKafkaVersionInput{}
			inputList := []kafka.UpdateClusterKafkaVersionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateClusterKafkaVersion(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/update-configuration":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.UpdateConfigurationInput{}
			inputList := []kafka.UpdateConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kafka/update-monitoring":
			svc := kafka.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kafka.UpdateMonitoringInput{}
			inputList := []kafka.UpdateMonitoringInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateMonitoring(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/add-tags-to-stream":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.AddTagsToStreamInput{}
			inputList := []kinesis.AddTagsToStreamInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.AddTagsToStream(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/create-stream":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.CreateStreamInput{}
			inputList := []kinesis.CreateStreamInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateStream(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/decrease-stream-retention-period":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.DecreaseStreamRetentionPeriodInput{}
			inputList := []kinesis.DecreaseStreamRetentionPeriodInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DecreaseStreamRetentionPeriod(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/delete-stream":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.DeleteStreamInput{}
			inputList := []kinesis.DeleteStreamInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteStream(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/deregister-stream-consumer":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.DeregisterStreamConsumerInput{}
			inputList := []kinesis.DeregisterStreamConsumerInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeregisterStreamConsumer(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/describe-limits":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.DescribeLimitsInput{}
			inputList := []kinesis.DescribeLimitsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeLimits(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/describe-stream":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.DescribeStreamInput{}
			inputList := []kinesis.DescribeStreamInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeStream(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/describe-stream-consumer":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.DescribeStreamConsumerInput{}
			inputList := []kinesis.DescribeStreamConsumerInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeStreamConsumer(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/describe-stream-summary":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.DescribeStreamSummaryInput{}
			inputList := []kinesis.DescribeStreamSummaryInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeStreamSummary(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/disable-enhanced-monitoring":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.DisableEnhancedMonitoringInput{}
			inputList := []kinesis.DisableEnhancedMonitoringInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DisableEnhancedMonitoring(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/enable-enhanced-monitoring":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.EnableEnhancedMonitoringInput{}
			inputList := []kinesis.EnableEnhancedMonitoringInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.EnableEnhancedMonitoring(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/get-records":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.GetRecordsInput{}
			inputList := []kinesis.GetRecordsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetRecords(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/get-shard-iterator":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.GetShardIteratorInput{}
			inputList := []kinesis.GetShardIteratorInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetShardIterator(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/increase-stream-retention-period":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.IncreaseStreamRetentionPeriodInput{}
			inputList := []kinesis.IncreaseStreamRetentionPeriodInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.IncreaseStreamRetentionPeriod(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/list-shards":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.ListShardsInput{}
			inputList := []kinesis.ListShardsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListShards(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/list-stream-consumers":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.ListStreamConsumersInput{}
			inputList := []kinesis.ListStreamConsumersInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListStreamConsumers(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/list-streams":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.ListStreamsInput{}
			inputList := []kinesis.ListStreamsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListStreams(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/list-tags-for-stream":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.ListTagsForStreamInput{}
			inputList := []kinesis.ListTagsForStreamInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListTagsForStream(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/merge-shards":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.MergeShardsInput{}
			inputList := []kinesis.MergeShardsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.MergeShards(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/put-record":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.PutRecordInput{}
			inputList := []kinesis.PutRecordInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutRecord(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/put-records":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.PutRecordsInput{}
			inputList := []kinesis.PutRecordsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutRecords(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/register-stream-consumer":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.RegisterStreamConsumerInput{}
			inputList := []kinesis.RegisterStreamConsumerInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.RegisterStreamConsumer(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/remove-tags-from-stream":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.RemoveTagsFromStreamInput{}
			inputList := []kinesis.RemoveTagsFromStreamInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.RemoveTagsFromStream(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/split-shard":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.SplitShardInput{}
			inputList := []kinesis.SplitShardInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.SplitShard(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/start-stream-encryption":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.StartStreamEncryptionInput{}
			inputList := []kinesis.StartStreamEncryptionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StartStreamEncryption(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/stop-stream-encryption":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.StopStreamEncryptionInput{}
			inputList := []kinesis.StopStreamEncryptionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StopStreamEncryption(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/subscribe-to-shard":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.SubscribeToShardInput{}
			inputList := []kinesis.SubscribeToShardInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.SubscribeToShard(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.kinesis/update-shard-count":
			svc := kinesis.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &kinesis.UpdateShardCountInput{}
			inputList := []kinesis.UpdateShardCountInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateShardCount(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/add-layer-version-permission":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.AddLayerVersionPermissionInput{}
			inputList := []lambda.AddLayerVersionPermissionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.AddLayerVersionPermission(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/add-permission":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.AddPermissionInput{}
			inputList := []lambda.AddPermissionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.AddPermission(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/create-alias":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.CreateAliasInput{}
			inputList := []lambda.CreateAliasInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateAlias(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/create-event-source-mapping":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.CreateEventSourceMappingInput{}
			inputList := []lambda.CreateEventSourceMappingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateEventSourceMapping(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/create-function":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.CreateFunctionInput{}
			inputList := []lambda.CreateFunctionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateFunction(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/delete-alias":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.DeleteAliasInput{}
			inputList := []lambda.DeleteAliasInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteAlias(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/delete-event-source-mapping":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.DeleteEventSourceMappingInput{}
			inputList := []lambda.DeleteEventSourceMappingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteEventSourceMapping(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/delete-function":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.DeleteFunctionInput{}
			inputList := []lambda.DeleteFunctionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteFunction(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/delete-function-concurrency":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.DeleteFunctionConcurrencyInput{}
			inputList := []lambda.DeleteFunctionConcurrencyInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteFunctionConcurrency(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/delete-function-event-invoke-config":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.DeleteFunctionEventInvokeConfigInput{}
			inputList := []lambda.DeleteFunctionEventInvokeConfigInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteFunctionEventInvokeConfig(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/delete-layer-version":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.DeleteLayerVersionInput{}
			inputList := []lambda.DeleteLayerVersionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteLayerVersion(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/delete-provisioned-concurrency-config":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.DeleteProvisionedConcurrencyConfigInput{}
			inputList := []lambda.DeleteProvisionedConcurrencyConfigInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteProvisionedConcurrencyConfig(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/get-account-settings":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.GetAccountSettingsInput{}
			inputList := []lambda.GetAccountSettingsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetAccountSettings(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/get-alias":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.GetAliasInput{}
			inputList := []lambda.GetAliasInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetAlias(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/get-event-source-mapping":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.GetEventSourceMappingInput{}
			inputList := []lambda.GetEventSourceMappingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetEventSourceMapping(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/get-function":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.GetFunctionInput{}
			inputList := []lambda.GetFunctionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetFunction(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/get-function-concurrency":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.GetFunctionConcurrencyInput{}
			inputList := []lambda.GetFunctionConcurrencyInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetFunctionConcurrency(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/get-function-configuration":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.GetFunctionConfigurationInput{}
			inputList := []lambda.GetFunctionConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetFunctionConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/get-function-event-invoke-config":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.GetFunctionEventInvokeConfigInput{}
			inputList := []lambda.GetFunctionEventInvokeConfigInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetFunctionEventInvokeConfig(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/get-layer-version":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.GetLayerVersionInput{}
			inputList := []lambda.GetLayerVersionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetLayerVersion(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/get-layer-version-by-arn":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.GetLayerVersionByArnInput{}
			inputList := []lambda.GetLayerVersionByArnInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetLayerVersionByArn(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/get-layer-version-policy":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.GetLayerVersionPolicyInput{}
			inputList := []lambda.GetLayerVersionPolicyInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetLayerVersionPolicy(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/get-policy":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.GetPolicyInput{}
			inputList := []lambda.GetPolicyInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetPolicy(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/get-provisioned-concurrency-config":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.GetProvisionedConcurrencyConfigInput{}
			inputList := []lambda.GetProvisionedConcurrencyConfigInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetProvisionedConcurrencyConfig(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/invoke":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.InvokeInput{}
			inputList := []lambda.InvokeInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.Invoke(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/invoke-async":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.InvokeAsyncInput{}
			inputList := []lambda.InvokeAsyncInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.InvokeAsync(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/list-aliases":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.ListAliasesInput{}
			inputList := []lambda.ListAliasesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListAliases(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/list-event-source-mappings":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.ListEventSourceMappingsInput{}
			inputList := []lambda.ListEventSourceMappingsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListEventSourceMappings(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/list-function-event-invoke-configs":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.ListFunctionEventInvokeConfigsInput{}
			inputList := []lambda.ListFunctionEventInvokeConfigsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListFunctionEventInvokeConfigs(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/list-functions":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.ListFunctionsInput{}
			inputList := []lambda.ListFunctionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListFunctions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/list-layer-versions":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.ListLayerVersionsInput{}
			inputList := []lambda.ListLayerVersionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListLayerVersions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/list-layers":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.ListLayersInput{}
			inputList := []lambda.ListLayersInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListLayers(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/list-provisioned-concurrency-configs":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.ListProvisionedConcurrencyConfigsInput{}
			inputList := []lambda.ListProvisionedConcurrencyConfigsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListProvisionedConcurrencyConfigs(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/list-tags":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.ListTagsInput{}
			inputList := []lambda.ListTagsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListTags(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/list-versions-by-function":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.ListVersionsByFunctionInput{}
			inputList := []lambda.ListVersionsByFunctionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListVersionsByFunction(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/publish-layer-version":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.PublishLayerVersionInput{}
			inputList := []lambda.PublishLayerVersionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PublishLayerVersion(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/publish-version":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.PublishVersionInput{}
			inputList := []lambda.PublishVersionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PublishVersion(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/put-function-concurrency":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.PutFunctionConcurrencyInput{}
			inputList := []lambda.PutFunctionConcurrencyInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutFunctionConcurrency(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/put-function-event-invoke-config":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.PutFunctionEventInvokeConfigInput{}
			inputList := []lambda.PutFunctionEventInvokeConfigInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutFunctionEventInvokeConfig(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/put-provisioned-concurrency-config":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.PutProvisionedConcurrencyConfigInput{}
			inputList := []lambda.PutProvisionedConcurrencyConfigInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutProvisionedConcurrencyConfig(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/remove-layer-version-permission":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.RemoveLayerVersionPermissionInput{}
			inputList := []lambda.RemoveLayerVersionPermissionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.RemoveLayerVersionPermission(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/remove-permission":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.RemovePermissionInput{}
			inputList := []lambda.RemovePermissionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.RemovePermission(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/tag-resource":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.TagResourceInput{}
			inputList := []lambda.TagResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.TagResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/untag-resource":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.UntagResourceInput{}
			inputList := []lambda.UntagResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UntagResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/update-alias":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.UpdateAliasInput{}
			inputList := []lambda.UpdateAliasInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateAlias(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/update-event-source-mapping":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.UpdateEventSourceMappingInput{}
			inputList := []lambda.UpdateEventSourceMappingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateEventSourceMapping(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/update-function-code":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.UpdateFunctionCodeInput{}
			inputList := []lambda.UpdateFunctionCodeInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateFunctionCode(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/update-function-configuration":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.UpdateFunctionConfigurationInput{}
			inputList := []lambda.UpdateFunctionConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateFunctionConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.lambda/update-function-event-invoke-config":
			svc := lambda.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &lambda.UpdateFunctionEventInvokeConfigInput{}
			inputList := []lambda.UpdateFunctionEventInvokeConfigInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateFunctionEventInvokeConfig(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/abort-multipart-upload":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.AbortMultipartUploadInput{}
			inputList := []s3.AbortMultipartUploadInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.AbortMultipartUpload(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/complete-multipart-upload":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.CompleteMultipartUploadInput{}
			inputList := []s3.CompleteMultipartUploadInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CompleteMultipartUpload(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/copy-object":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.CopyObjectInput{}
			inputList := []s3.CopyObjectInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CopyObject(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/create-bucket":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.CreateBucketInput{}
			inputList := []s3.CreateBucketInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateBucket(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/create-multipart-upload":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.CreateMultipartUploadInput{}
			inputList := []s3.CreateMultipartUploadInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateMultipartUpload(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/delete-bucket":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.DeleteBucketInput{}
			inputList := []s3.DeleteBucketInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteBucket(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/delete-bucket-analytics-configuration":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.DeleteBucketAnalyticsConfigurationInput{}
			inputList := []s3.DeleteBucketAnalyticsConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteBucketAnalyticsConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/delete-bucket-cors":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.DeleteBucketCorsInput{}
			inputList := []s3.DeleteBucketCorsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteBucketCors(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/delete-bucket-encryption":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.DeleteBucketEncryptionInput{}
			inputList := []s3.DeleteBucketEncryptionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteBucketEncryption(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/delete-bucket-inventory-configuration":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.DeleteBucketInventoryConfigurationInput{}
			inputList := []s3.DeleteBucketInventoryConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteBucketInventoryConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/delete-bucket-lifecycle":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.DeleteBucketLifecycleInput{}
			inputList := []s3.DeleteBucketLifecycleInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteBucketLifecycle(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/delete-bucket-metrics-configuration":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.DeleteBucketMetricsConfigurationInput{}
			inputList := []s3.DeleteBucketMetricsConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteBucketMetricsConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/delete-bucket-policy":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.DeleteBucketPolicyInput{}
			inputList := []s3.DeleteBucketPolicyInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteBucketPolicy(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/delete-bucket-replication":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.DeleteBucketReplicationInput{}
			inputList := []s3.DeleteBucketReplicationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteBucketReplication(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/delete-bucket-tagging":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.DeleteBucketTaggingInput{}
			inputList := []s3.DeleteBucketTaggingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteBucketTagging(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/delete-bucket-website":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.DeleteBucketWebsiteInput{}
			inputList := []s3.DeleteBucketWebsiteInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteBucketWebsite(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/delete-object":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.DeleteObjectInput{}
			inputList := []s3.DeleteObjectInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteObject(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/delete-object-tagging":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.DeleteObjectTaggingInput{}
			inputList := []s3.DeleteObjectTaggingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteObjectTagging(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/delete-objects":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.DeleteObjectsInput{}
			inputList := []s3.DeleteObjectsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteObjects(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/delete-public-access-block":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.DeletePublicAccessBlockInput{}
			inputList := []s3.DeletePublicAccessBlockInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeletePublicAccessBlock(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-bucket-accelerate-configuration":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetBucketAccelerateConfigurationInput{}
			inputList := []s3.GetBucketAccelerateConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBucketAccelerateConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-bucket-acl":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetBucketAclInput{}
			inputList := []s3.GetBucketAclInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBucketAcl(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-bucket-analytics-configuration":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetBucketAnalyticsConfigurationInput{}
			inputList := []s3.GetBucketAnalyticsConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBucketAnalyticsConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-bucket-cors":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetBucketCorsInput{}
			inputList := []s3.GetBucketCorsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBucketCors(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-bucket-encryption":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetBucketEncryptionInput{}
			inputList := []s3.GetBucketEncryptionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBucketEncryption(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-bucket-inventory-configuration":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetBucketInventoryConfigurationInput{}
			inputList := []s3.GetBucketInventoryConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBucketInventoryConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-bucket-lifecycle":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetBucketLifecycleInput{}
			inputList := []s3.GetBucketLifecycleInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBucketLifecycle(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-bucket-lifecycle-configuration":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetBucketLifecycleConfigurationInput{}
			inputList := []s3.GetBucketLifecycleConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBucketLifecycleConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-bucket-location":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetBucketLocationInput{}
			inputList := []s3.GetBucketLocationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBucketLocation(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-bucket-logging":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetBucketLoggingInput{}
			inputList := []s3.GetBucketLoggingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBucketLogging(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-bucket-metrics-configuration":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetBucketMetricsConfigurationInput{}
			inputList := []s3.GetBucketMetricsConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBucketMetricsConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-bucket-policy":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetBucketPolicyInput{}
			inputList := []s3.GetBucketPolicyInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBucketPolicy(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-bucket-policy-status":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetBucketPolicyStatusInput{}
			inputList := []s3.GetBucketPolicyStatusInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBucketPolicyStatus(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-bucket-replication":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetBucketReplicationInput{}
			inputList := []s3.GetBucketReplicationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBucketReplication(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-bucket-request-payment":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetBucketRequestPaymentInput{}
			inputList := []s3.GetBucketRequestPaymentInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBucketRequestPayment(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-bucket-tagging":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetBucketTaggingInput{}
			inputList := []s3.GetBucketTaggingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBucketTagging(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-bucket-versioning":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetBucketVersioningInput{}
			inputList := []s3.GetBucketVersioningInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBucketVersioning(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-bucket-website":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetBucketWebsiteInput{}
			inputList := []s3.GetBucketWebsiteInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetBucketWebsite(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-object":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetObjectInput{}
			inputList := []s3.GetObjectInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetObject(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-object-acl":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetObjectAclInput{}
			inputList := []s3.GetObjectAclInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetObjectAcl(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-object-legal-hold":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetObjectLegalHoldInput{}
			inputList := []s3.GetObjectLegalHoldInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetObjectLegalHold(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-object-lock-configuration":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetObjectLockConfigurationInput{}
			inputList := []s3.GetObjectLockConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetObjectLockConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-object-retention":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetObjectRetentionInput{}
			inputList := []s3.GetObjectRetentionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetObjectRetention(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-object-tagging":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetObjectTaggingInput{}
			inputList := []s3.GetObjectTaggingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetObjectTagging(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-object-torrent":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetObjectTorrentInput{}
			inputList := []s3.GetObjectTorrentInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetObjectTorrent(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/get-public-access-block":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.GetPublicAccessBlockInput{}
			inputList := []s3.GetPublicAccessBlockInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetPublicAccessBlock(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/head-bucket":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.HeadBucketInput{}
			inputList := []s3.HeadBucketInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.HeadBucket(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/head-object":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.HeadObjectInput{}
			inputList := []s3.HeadObjectInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.HeadObject(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/list-bucket-analytics-configurations":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.ListBucketAnalyticsConfigurationsInput{}
			inputList := []s3.ListBucketAnalyticsConfigurationsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListBucketAnalyticsConfigurations(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/list-bucket-inventory-configurations":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.ListBucketInventoryConfigurationsInput{}
			inputList := []s3.ListBucketInventoryConfigurationsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListBucketInventoryConfigurations(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/list-bucket-metrics-configurations":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.ListBucketMetricsConfigurationsInput{}
			inputList := []s3.ListBucketMetricsConfigurationsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListBucketMetricsConfigurations(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/list-buckets":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.ListBucketsInput{}
			inputList := []s3.ListBucketsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListBuckets(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/list-multipart-uploads":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.ListMultipartUploadsInput{}
			inputList := []s3.ListMultipartUploadsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListMultipartUploads(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/list-object-versions":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.ListObjectVersionsInput{}
			inputList := []s3.ListObjectVersionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListObjectVersions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/list-objects":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.ListObjectsInput{}
			inputList := []s3.ListObjectsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListObjects(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/list-objects-v2":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.ListObjectsV2Input{}
			inputList := []s3.ListObjectsV2Input{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListObjectsV2(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/list-parts":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.ListPartsInput{}
			inputList := []s3.ListPartsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListParts(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-bucket-accelerate-configuration":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutBucketAccelerateConfigurationInput{}
			inputList := []s3.PutBucketAccelerateConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutBucketAccelerateConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-bucket-acl":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutBucketAclInput{}
			inputList := []s3.PutBucketAclInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutBucketAcl(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-bucket-analytics-configuration":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutBucketAnalyticsConfigurationInput{}
			inputList := []s3.PutBucketAnalyticsConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutBucketAnalyticsConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-bucket-cors":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutBucketCorsInput{}
			inputList := []s3.PutBucketCorsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutBucketCors(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-bucket-encryption":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutBucketEncryptionInput{}
			inputList := []s3.PutBucketEncryptionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutBucketEncryption(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-bucket-inventory-configuration":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutBucketInventoryConfigurationInput{}
			inputList := []s3.PutBucketInventoryConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutBucketInventoryConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-bucket-lifecycle":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutBucketLifecycleInput{}
			inputList := []s3.PutBucketLifecycleInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutBucketLifecycle(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-bucket-lifecycle-configuration":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutBucketLifecycleConfigurationInput{}
			inputList := []s3.PutBucketLifecycleConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutBucketLifecycleConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-bucket-logging":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutBucketLoggingInput{}
			inputList := []s3.PutBucketLoggingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutBucketLogging(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-bucket-metrics-configuration":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutBucketMetricsConfigurationInput{}
			inputList := []s3.PutBucketMetricsConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutBucketMetricsConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-bucket-notification":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutBucketNotificationInput{}
			inputList := []s3.PutBucketNotificationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutBucketNotification(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-bucket-notification-configuration":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutBucketNotificationConfigurationInput{}
			inputList := []s3.PutBucketNotificationConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutBucketNotificationConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-bucket-policy":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutBucketPolicyInput{}
			inputList := []s3.PutBucketPolicyInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutBucketPolicy(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-bucket-replication":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutBucketReplicationInput{}
			inputList := []s3.PutBucketReplicationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutBucketReplication(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-bucket-request-payment":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutBucketRequestPaymentInput{}
			inputList := []s3.PutBucketRequestPaymentInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutBucketRequestPayment(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-bucket-tagging":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutBucketTaggingInput{}
			inputList := []s3.PutBucketTaggingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutBucketTagging(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-bucket-versioning":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutBucketVersioningInput{}
			inputList := []s3.PutBucketVersioningInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutBucketVersioning(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-bucket-website":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutBucketWebsiteInput{}
			inputList := []s3.PutBucketWebsiteInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutBucketWebsite(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-object":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutObjectInput{}
			inputList := []s3.PutObjectInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutObject(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-object-acl":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutObjectAclInput{}
			inputList := []s3.PutObjectAclInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutObjectAcl(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-object-legal-hold":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutObjectLegalHoldInput{}
			inputList := []s3.PutObjectLegalHoldInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutObjectLegalHold(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-object-lock-configuration":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutObjectLockConfigurationInput{}
			inputList := []s3.PutObjectLockConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutObjectLockConfiguration(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-object-retention":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutObjectRetentionInput{}
			inputList := []s3.PutObjectRetentionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutObjectRetention(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-object-tagging":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutObjectTaggingInput{}
			inputList := []s3.PutObjectTaggingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutObjectTagging(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/put-public-access-block":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.PutPublicAccessBlockInput{}
			inputList := []s3.PutPublicAccessBlockInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutPublicAccessBlock(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/restore-object":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.RestoreObjectInput{}
			inputList := []s3.RestoreObjectInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.RestoreObject(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/select-object-content":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.SelectObjectContentInput{}
			inputList := []s3.SelectObjectContentInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.SelectObjectContent(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/upload-part":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.UploadPartInput{}
			inputList := []s3.UploadPartInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UploadPart(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.s3/upload-part-copy":
			svc := s3.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &s3.UploadPartCopyInput{}
			inputList := []s3.UploadPartCopyInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UploadPartCopy(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/add-permission":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.AddPermissionInput{}
			inputList := []sns.AddPermissionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.AddPermission(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/check-if-phone-number-is-opted-out":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.CheckIfPhoneNumberIsOptedOutInput{}
			inputList := []sns.CheckIfPhoneNumberIsOptedOutInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CheckIfPhoneNumberIsOptedOut(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/confirm-subscription":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.ConfirmSubscriptionInput{}
			inputList := []sns.ConfirmSubscriptionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ConfirmSubscription(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/create-platform-application":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.CreatePlatformApplicationInput{}
			inputList := []sns.CreatePlatformApplicationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreatePlatformApplication(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/create-platform-endpoint":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.CreatePlatformEndpointInput{}
			inputList := []sns.CreatePlatformEndpointInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreatePlatformEndpoint(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/create-topic":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.CreateTopicInput{}
			inputList := []sns.CreateTopicInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateTopic(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/delete-endpoint":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.DeleteEndpointInput{}
			inputList := []sns.DeleteEndpointInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteEndpoint(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/delete-platform-application":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.DeletePlatformApplicationInput{}
			inputList := []sns.DeletePlatformApplicationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeletePlatformApplication(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/delete-topic":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.DeleteTopicInput{}
			inputList := []sns.DeleteTopicInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteTopic(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/get-endpoint-attributes":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.GetEndpointAttributesInput{}
			inputList := []sns.GetEndpointAttributesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetEndpointAttributes(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/get-platform-application-attributes":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.GetPlatformApplicationAttributesInput{}
			inputList := []sns.GetPlatformApplicationAttributesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetPlatformApplicationAttributes(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/get-s-m-s-attributes":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.GetSMSAttributesInput{}
			inputList := []sns.GetSMSAttributesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetSMSAttributes(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/get-subscription-attributes":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.GetSubscriptionAttributesInput{}
			inputList := []sns.GetSubscriptionAttributesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetSubscriptionAttributes(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/get-topic-attributes":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.GetTopicAttributesInput{}
			inputList := []sns.GetTopicAttributesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetTopicAttributes(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/list-endpoints-by-platform-application":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.ListEndpointsByPlatformApplicationInput{}
			inputList := []sns.ListEndpointsByPlatformApplicationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListEndpointsByPlatformApplication(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/list-phone-numbers-opted-out":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.ListPhoneNumbersOptedOutInput{}
			inputList := []sns.ListPhoneNumbersOptedOutInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListPhoneNumbersOptedOut(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/list-platform-applications":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.ListPlatformApplicationsInput{}
			inputList := []sns.ListPlatformApplicationsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListPlatformApplications(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/list-subscriptions":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.ListSubscriptionsInput{}
			inputList := []sns.ListSubscriptionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListSubscriptions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/list-subscriptions-by-topic":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.ListSubscriptionsByTopicInput{}
			inputList := []sns.ListSubscriptionsByTopicInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListSubscriptionsByTopic(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/list-tags-for-resource":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.ListTagsForResourceInput{}
			inputList := []sns.ListTagsForResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListTagsForResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/list-topics":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.ListTopicsInput{}
			inputList := []sns.ListTopicsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListTopics(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/opt-in-phone-number":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.OptInPhoneNumberInput{}
			inputList := []sns.OptInPhoneNumberInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.OptInPhoneNumber(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/publish":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.PublishInput{}
			inputList := []sns.PublishInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.Publish(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/remove-permission":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.RemovePermissionInput{}
			inputList := []sns.RemovePermissionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.RemovePermission(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/set-endpoint-attributes":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.SetEndpointAttributesInput{}
			inputList := []sns.SetEndpointAttributesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.SetEndpointAttributes(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/set-platform-application-attributes":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.SetPlatformApplicationAttributesInput{}
			inputList := []sns.SetPlatformApplicationAttributesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.SetPlatformApplicationAttributes(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/set-s-m-s-attributes":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.SetSMSAttributesInput{}
			inputList := []sns.SetSMSAttributesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.SetSMSAttributes(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/set-subscription-attributes":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.SetSubscriptionAttributesInput{}
			inputList := []sns.SetSubscriptionAttributesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.SetSubscriptionAttributes(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/set-topic-attributes":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.SetTopicAttributesInput{}
			inputList := []sns.SetTopicAttributesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.SetTopicAttributes(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/subscribe":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.SubscribeInput{}
			inputList := []sns.SubscribeInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.Subscribe(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/tag-resource":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.TagResourceInput{}
			inputList := []sns.TagResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.TagResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/unsubscribe":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.UnsubscribeInput{}
			inputList := []sns.UnsubscribeInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.Unsubscribe(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sns/untag-resource":
			svc := sns.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sns.UntagResourceInput{}
			inputList := []sns.UntagResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UntagResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/add-permission":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.AddPermissionInput{}
			inputList := []sqs.AddPermissionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.AddPermission(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/change-message-visibility":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.ChangeMessageVisibilityInput{}
			inputList := []sqs.ChangeMessageVisibilityInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ChangeMessageVisibility(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/change-message-visibility-batch":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.ChangeMessageVisibilityBatchInput{}
			inputList := []sqs.ChangeMessageVisibilityBatchInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ChangeMessageVisibilityBatch(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/create-queue":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.CreateQueueInput{}
			inputList := []sqs.CreateQueueInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateQueue(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/delete-message":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.DeleteMessageInput{}
			inputList := []sqs.DeleteMessageInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteMessage(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/delete-message-batch":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.DeleteMessageBatchInput{}
			inputList := []sqs.DeleteMessageBatchInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteMessageBatch(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/delete-queue":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.DeleteQueueInput{}
			inputList := []sqs.DeleteQueueInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteQueue(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/get-queue-attributes":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.GetQueueAttributesInput{}
			inputList := []sqs.GetQueueAttributesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetQueueAttributes(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/get-queue-url":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.GetQueueUrlInput{}
			inputList := []sqs.GetQueueUrlInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetQueueUrl(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/list-dead-letter-source-queues":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.ListDeadLetterSourceQueuesInput{}
			inputList := []sqs.ListDeadLetterSourceQueuesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListDeadLetterSourceQueues(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/list-queue-tags":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.ListQueueTagsInput{}
			inputList := []sqs.ListQueueTagsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListQueueTags(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/list-queues":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.ListQueuesInput{}
			inputList := []sqs.ListQueuesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListQueues(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/purge-queue":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.PurgeQueueInput{}
			inputList := []sqs.PurgeQueueInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PurgeQueue(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/receive-message":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.ReceiveMessageInput{}
			inputList := []sqs.ReceiveMessageInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ReceiveMessage(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/remove-permission":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.RemovePermissionInput{}
			inputList := []sqs.RemovePermissionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.RemovePermission(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/send-message":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.SendMessageInput{}
			inputList := []sqs.SendMessageInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.SendMessage(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/send-message-batch":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.SendMessageBatchInput{}
			inputList := []sqs.SendMessageBatchInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.SendMessageBatch(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/set-queue-attributes":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.SetQueueAttributesInput{}
			inputList := []sqs.SetQueueAttributesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.SetQueueAttributes(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/tag-queue":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.TagQueueInput{}
			inputList := []sqs.TagQueueInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.TagQueue(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sqs/untag-queue":
			svc := sqs.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sqs.UntagQueueInput{}
			inputList := []sqs.UntagQueueInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UntagQueue(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/add-tags-to-resource":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.AddTagsToResourceInput{}
			inputList := []ssm.AddTagsToResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.AddTagsToResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/cancel-command":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.CancelCommandInput{}
			inputList := []ssm.CancelCommandInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CancelCommand(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/cancel-maintenance-window-execution":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.CancelMaintenanceWindowExecutionInput{}
			inputList := []ssm.CancelMaintenanceWindowExecutionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CancelMaintenanceWindowExecution(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/create-activation":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.CreateActivationInput{}
			inputList := []ssm.CreateActivationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateActivation(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/create-association":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.CreateAssociationInput{}
			inputList := []ssm.CreateAssociationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateAssociation(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/create-association-batch":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.CreateAssociationBatchInput{}
			inputList := []ssm.CreateAssociationBatchInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateAssociationBatch(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/create-document":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.CreateDocumentInput{}
			inputList := []ssm.CreateDocumentInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateDocument(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/create-maintenance-window":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.CreateMaintenanceWindowInput{}
			inputList := []ssm.CreateMaintenanceWindowInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateMaintenanceWindow(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/create-ops-item":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.CreateOpsItemInput{}
			inputList := []ssm.CreateOpsItemInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateOpsItem(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/create-patch-baseline":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.CreatePatchBaselineInput{}
			inputList := []ssm.CreatePatchBaselineInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreatePatchBaseline(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/create-resource-data-sync":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.CreateResourceDataSyncInput{}
			inputList := []ssm.CreateResourceDataSyncInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.CreateResourceDataSync(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/delete-activation":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DeleteActivationInput{}
			inputList := []ssm.DeleteActivationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteActivation(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/delete-association":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DeleteAssociationInput{}
			inputList := []ssm.DeleteAssociationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteAssociation(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/delete-document":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DeleteDocumentInput{}
			inputList := []ssm.DeleteDocumentInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteDocument(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/delete-inventory":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DeleteInventoryInput{}
			inputList := []ssm.DeleteInventoryInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteInventory(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/delete-maintenance-window":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DeleteMaintenanceWindowInput{}
			inputList := []ssm.DeleteMaintenanceWindowInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteMaintenanceWindow(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/delete-parameter":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DeleteParameterInput{}
			inputList := []ssm.DeleteParameterInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteParameter(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/delete-parameters":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DeleteParametersInput{}
			inputList := []ssm.DeleteParametersInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteParameters(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/delete-patch-baseline":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DeletePatchBaselineInput{}
			inputList := []ssm.DeletePatchBaselineInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeletePatchBaseline(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/delete-resource-data-sync":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DeleteResourceDataSyncInput{}
			inputList := []ssm.DeleteResourceDataSyncInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeleteResourceDataSync(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/deregister-managed-instance":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DeregisterManagedInstanceInput{}
			inputList := []ssm.DeregisterManagedInstanceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeregisterManagedInstance(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/deregister-patch-baseline-for-patch-group":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DeregisterPatchBaselineForPatchGroupInput{}
			inputList := []ssm.DeregisterPatchBaselineForPatchGroupInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeregisterPatchBaselineForPatchGroup(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/deregister-target-from-maintenance-window":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DeregisterTargetFromMaintenanceWindowInput{}
			inputList := []ssm.DeregisterTargetFromMaintenanceWindowInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeregisterTargetFromMaintenanceWindow(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/deregister-task-from-maintenance-window":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DeregisterTaskFromMaintenanceWindowInput{}
			inputList := []ssm.DeregisterTaskFromMaintenanceWindowInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DeregisterTaskFromMaintenanceWindow(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-activations":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeActivationsInput{}
			inputList := []ssm.DescribeActivationsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeActivations(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-association":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeAssociationInput{}
			inputList := []ssm.DescribeAssociationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeAssociation(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-association-execution-targets":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeAssociationExecutionTargetsInput{}
			inputList := []ssm.DescribeAssociationExecutionTargetsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeAssociationExecutionTargets(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-association-executions":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeAssociationExecutionsInput{}
			inputList := []ssm.DescribeAssociationExecutionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeAssociationExecutions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-automation-executions":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeAutomationExecutionsInput{}
			inputList := []ssm.DescribeAutomationExecutionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeAutomationExecutions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-automation-step-executions":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeAutomationStepExecutionsInput{}
			inputList := []ssm.DescribeAutomationStepExecutionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeAutomationStepExecutions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-available-patches":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeAvailablePatchesInput{}
			inputList := []ssm.DescribeAvailablePatchesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeAvailablePatches(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-document":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeDocumentInput{}
			inputList := []ssm.DescribeDocumentInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeDocument(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-document-permission":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeDocumentPermissionInput{}
			inputList := []ssm.DescribeDocumentPermissionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeDocumentPermission(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-effective-instance-associations":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeEffectiveInstanceAssociationsInput{}
			inputList := []ssm.DescribeEffectiveInstanceAssociationsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeEffectiveInstanceAssociations(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-effective-patches-for-patch-baseline":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeEffectivePatchesForPatchBaselineInput{}
			inputList := []ssm.DescribeEffectivePatchesForPatchBaselineInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeEffectivePatchesForPatchBaseline(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-instance-associations-status":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeInstanceAssociationsStatusInput{}
			inputList := []ssm.DescribeInstanceAssociationsStatusInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeInstanceAssociationsStatus(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-instance-information":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeInstanceInformationInput{}
			inputList := []ssm.DescribeInstanceInformationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeInstanceInformation(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-instance-patch-states":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeInstancePatchStatesInput{}
			inputList := []ssm.DescribeInstancePatchStatesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeInstancePatchStates(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-instance-patch-states-for-patch-group":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeInstancePatchStatesForPatchGroupInput{}
			inputList := []ssm.DescribeInstancePatchStatesForPatchGroupInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeInstancePatchStatesForPatchGroup(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-instance-patches":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeInstancePatchesInput{}
			inputList := []ssm.DescribeInstancePatchesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeInstancePatches(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-inventory-deletions":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeInventoryDeletionsInput{}
			inputList := []ssm.DescribeInventoryDeletionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeInventoryDeletions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-maintenance-window-execution-task-invocations":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput{}
			inputList := []ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeMaintenanceWindowExecutionTaskInvocations(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-maintenance-window-execution-tasks":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeMaintenanceWindowExecutionTasksInput{}
			inputList := []ssm.DescribeMaintenanceWindowExecutionTasksInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeMaintenanceWindowExecutionTasks(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-maintenance-window-executions":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeMaintenanceWindowExecutionsInput{}
			inputList := []ssm.DescribeMaintenanceWindowExecutionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeMaintenanceWindowExecutions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-maintenance-window-schedule":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeMaintenanceWindowScheduleInput{}
			inputList := []ssm.DescribeMaintenanceWindowScheduleInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeMaintenanceWindowSchedule(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-maintenance-window-targets":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeMaintenanceWindowTargetsInput{}
			inputList := []ssm.DescribeMaintenanceWindowTargetsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeMaintenanceWindowTargets(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-maintenance-window-tasks":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeMaintenanceWindowTasksInput{}
			inputList := []ssm.DescribeMaintenanceWindowTasksInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeMaintenanceWindowTasks(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-maintenance-windows":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeMaintenanceWindowsInput{}
			inputList := []ssm.DescribeMaintenanceWindowsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeMaintenanceWindows(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-maintenance-windows-for-target":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeMaintenanceWindowsForTargetInput{}
			inputList := []ssm.DescribeMaintenanceWindowsForTargetInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeMaintenanceWindowsForTarget(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-ops-items":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeOpsItemsInput{}
			inputList := []ssm.DescribeOpsItemsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeOpsItems(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-parameters":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeParametersInput{}
			inputList := []ssm.DescribeParametersInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeParameters(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-patch-baselines":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribePatchBaselinesInput{}
			inputList := []ssm.DescribePatchBaselinesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribePatchBaselines(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-patch-group-state":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribePatchGroupStateInput{}
			inputList := []ssm.DescribePatchGroupStateInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribePatchGroupState(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-patch-groups":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribePatchGroupsInput{}
			inputList := []ssm.DescribePatchGroupsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribePatchGroups(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-patch-properties":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribePatchPropertiesInput{}
			inputList := []ssm.DescribePatchPropertiesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribePatchProperties(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/describe-sessions":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.DescribeSessionsInput{}
			inputList := []ssm.DescribeSessionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DescribeSessions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-automation-execution":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetAutomationExecutionInput{}
			inputList := []ssm.GetAutomationExecutionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetAutomationExecution(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-calendar-state":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetCalendarStateInput{}
			inputList := []ssm.GetCalendarStateInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetCalendarState(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-command-invocation":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetCommandInvocationInput{}
			inputList := []ssm.GetCommandInvocationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetCommandInvocation(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-connection-status":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetConnectionStatusInput{}
			inputList := []ssm.GetConnectionStatusInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetConnectionStatus(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-default-patch-baseline":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetDefaultPatchBaselineInput{}
			inputList := []ssm.GetDefaultPatchBaselineInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetDefaultPatchBaseline(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-deployable-patch-snapshot-for-instance":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetDeployablePatchSnapshotForInstanceInput{}
			inputList := []ssm.GetDeployablePatchSnapshotForInstanceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetDeployablePatchSnapshotForInstance(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-document":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetDocumentInput{}
			inputList := []ssm.GetDocumentInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetDocument(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-inventory":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetInventoryInput{}
			inputList := []ssm.GetInventoryInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetInventory(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-inventory-schema":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetInventorySchemaInput{}
			inputList := []ssm.GetInventorySchemaInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetInventorySchema(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-maintenance-window":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetMaintenanceWindowInput{}
			inputList := []ssm.GetMaintenanceWindowInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetMaintenanceWindow(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-maintenance-window-execution":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetMaintenanceWindowExecutionInput{}
			inputList := []ssm.GetMaintenanceWindowExecutionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetMaintenanceWindowExecution(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-maintenance-window-execution-task":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetMaintenanceWindowExecutionTaskInput{}
			inputList := []ssm.GetMaintenanceWindowExecutionTaskInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetMaintenanceWindowExecutionTask(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-maintenance-window-execution-task-invocation":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetMaintenanceWindowExecutionTaskInvocationInput{}
			inputList := []ssm.GetMaintenanceWindowExecutionTaskInvocationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetMaintenanceWindowExecutionTaskInvocation(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-maintenance-window-task":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetMaintenanceWindowTaskInput{}
			inputList := []ssm.GetMaintenanceWindowTaskInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetMaintenanceWindowTask(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-ops-item":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetOpsItemInput{}
			inputList := []ssm.GetOpsItemInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetOpsItem(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-ops-summary":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetOpsSummaryInput{}
			inputList := []ssm.GetOpsSummaryInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetOpsSummary(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-parameter":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetParameterInput{}
			inputList := []ssm.GetParameterInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetParameter(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-parameter-history":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetParameterHistoryInput{}
			inputList := []ssm.GetParameterHistoryInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetParameterHistory(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-parameters":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetParametersInput{}
			inputList := []ssm.GetParametersInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetParameters(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-parameters-by-path":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetParametersByPathInput{}
			inputList := []ssm.GetParametersByPathInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetParametersByPath(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-patch-baseline":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetPatchBaselineInput{}
			inputList := []ssm.GetPatchBaselineInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetPatchBaseline(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-patch-baseline-for-patch-group":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetPatchBaselineForPatchGroupInput{}
			inputList := []ssm.GetPatchBaselineForPatchGroupInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetPatchBaselineForPatchGroup(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/get-service-setting":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.GetServiceSettingInput{}
			inputList := []ssm.GetServiceSettingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetServiceSetting(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/label-parameter-version":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.LabelParameterVersionInput{}
			inputList := []ssm.LabelParameterVersionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.LabelParameterVersion(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/list-association-versions":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.ListAssociationVersionsInput{}
			inputList := []ssm.ListAssociationVersionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListAssociationVersions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/list-associations":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.ListAssociationsInput{}
			inputList := []ssm.ListAssociationsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListAssociations(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/list-command-invocations":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.ListCommandInvocationsInput{}
			inputList := []ssm.ListCommandInvocationsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListCommandInvocations(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/list-commands":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.ListCommandsInput{}
			inputList := []ssm.ListCommandsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListCommands(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/list-compliance-items":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.ListComplianceItemsInput{}
			inputList := []ssm.ListComplianceItemsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListComplianceItems(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/list-compliance-summaries":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.ListComplianceSummariesInput{}
			inputList := []ssm.ListComplianceSummariesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListComplianceSummaries(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/list-document-versions":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.ListDocumentVersionsInput{}
			inputList := []ssm.ListDocumentVersionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListDocumentVersions(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/list-documents":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.ListDocumentsInput{}
			inputList := []ssm.ListDocumentsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListDocuments(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/list-inventory-entries":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.ListInventoryEntriesInput{}
			inputList := []ssm.ListInventoryEntriesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListInventoryEntries(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/list-resource-compliance-summaries":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.ListResourceComplianceSummariesInput{}
			inputList := []ssm.ListResourceComplianceSummariesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListResourceComplianceSummaries(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/list-resource-data-sync":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.ListResourceDataSyncInput{}
			inputList := []ssm.ListResourceDataSyncInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListResourceDataSync(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/list-tags-for-resource":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.ListTagsForResourceInput{}
			inputList := []ssm.ListTagsForResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ListTagsForResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/modify-document-permission":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.ModifyDocumentPermissionInput{}
			inputList := []ssm.ModifyDocumentPermissionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ModifyDocumentPermission(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/put-compliance-items":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.PutComplianceItemsInput{}
			inputList := []ssm.PutComplianceItemsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutComplianceItems(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/put-inventory":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.PutInventoryInput{}
			inputList := []ssm.PutInventoryInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutInventory(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/put-parameter":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.PutParameterInput{}
			inputList := []ssm.PutParameterInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.PutParameter(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/register-default-patch-baseline":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.RegisterDefaultPatchBaselineInput{}
			inputList := []ssm.RegisterDefaultPatchBaselineInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.RegisterDefaultPatchBaseline(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/register-patch-baseline-for-patch-group":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.RegisterPatchBaselineForPatchGroupInput{}
			inputList := []ssm.RegisterPatchBaselineForPatchGroupInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.RegisterPatchBaselineForPatchGroup(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/register-target-with-maintenance-window":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.RegisterTargetWithMaintenanceWindowInput{}
			inputList := []ssm.RegisterTargetWithMaintenanceWindowInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.RegisterTargetWithMaintenanceWindow(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/register-task-with-maintenance-window":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.RegisterTaskWithMaintenanceWindowInput{}
			inputList := []ssm.RegisterTaskWithMaintenanceWindowInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.RegisterTaskWithMaintenanceWindow(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/remove-tags-from-resource":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.RemoveTagsFromResourceInput{}
			inputList := []ssm.RemoveTagsFromResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.RemoveTagsFromResource(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/reset-service-setting":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.ResetServiceSettingInput{}
			inputList := []ssm.ResetServiceSettingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ResetServiceSetting(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/resume-session":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.ResumeSessionInput{}
			inputList := []ssm.ResumeSessionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.ResumeSession(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/send-automation-signal":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.SendAutomationSignalInput{}
			inputList := []ssm.SendAutomationSignalInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.SendAutomationSignal(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/send-command":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.SendCommandInput{}
			inputList := []ssm.SendCommandInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.SendCommand(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/start-associations-once":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.StartAssociationsOnceInput{}
			inputList := []ssm.StartAssociationsOnceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StartAssociationsOnce(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/start-automation-execution":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.StartAutomationExecutionInput{}
			inputList := []ssm.StartAutomationExecutionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StartAutomationExecution(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/start-session":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.StartSessionInput{}
			inputList := []ssm.StartSessionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StartSession(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/stop-automation-execution":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.StopAutomationExecutionInput{}
			inputList := []ssm.StopAutomationExecutionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.StopAutomationExecution(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/terminate-session":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.TerminateSessionInput{}
			inputList := []ssm.TerminateSessionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.TerminateSession(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/update-association":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.UpdateAssociationInput{}
			inputList := []ssm.UpdateAssociationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateAssociation(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/update-association-status":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.UpdateAssociationStatusInput{}
			inputList := []ssm.UpdateAssociationStatusInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateAssociationStatus(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/update-document":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.UpdateDocumentInput{}
			inputList := []ssm.UpdateDocumentInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateDocument(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/update-document-default-version":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.UpdateDocumentDefaultVersionInput{}
			inputList := []ssm.UpdateDocumentDefaultVersionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateDocumentDefaultVersion(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/update-maintenance-window":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.UpdateMaintenanceWindowInput{}
			inputList := []ssm.UpdateMaintenanceWindowInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateMaintenanceWindow(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/update-maintenance-window-target":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.UpdateMaintenanceWindowTargetInput{}
			inputList := []ssm.UpdateMaintenanceWindowTargetInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateMaintenanceWindowTarget(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/update-maintenance-window-task":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.UpdateMaintenanceWindowTaskInput{}
			inputList := []ssm.UpdateMaintenanceWindowTaskInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateMaintenanceWindowTask(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/update-managed-instance-role":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.UpdateManagedInstanceRoleInput{}
			inputList := []ssm.UpdateManagedInstanceRoleInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateManagedInstanceRole(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/update-ops-item":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.UpdateOpsItemInput{}
			inputList := []ssm.UpdateOpsItemInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateOpsItem(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/update-patch-baseline":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.UpdatePatchBaselineInput{}
			inputList := []ssm.UpdatePatchBaselineInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdatePatchBaseline(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/update-resource-data-sync":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.UpdateResourceDataSyncInput{}
			inputList := []ssm.UpdateResourceDataSyncInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateResourceDataSync(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.ssm/update-service-setting":
			svc := ssm.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &ssm.UpdateServiceSettingInput{}
			inputList := []ssm.UpdateServiceSettingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.UpdateServiceSetting(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sts/assume-role":
			svc := sts.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sts.AssumeRoleInput{}
			inputList := []sts.AssumeRoleInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.AssumeRole(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sts/assume-role-with-s-a-m-l":
			svc := sts.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sts.AssumeRoleWithSAMLInput{}
			inputList := []sts.AssumeRoleWithSAMLInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.AssumeRoleWithSAML(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sts/assume-role-with-web-identity":
			svc := sts.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sts.AssumeRoleWithWebIdentityInput{}
			inputList := []sts.AssumeRoleWithWebIdentityInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.AssumeRoleWithWebIdentity(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sts/decode-authorization-message":
			svc := sts.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sts.DecodeAuthorizationMessageInput{}
			inputList := []sts.DecodeAuthorizationMessageInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.DecodeAuthorizationMessage(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sts/get-access-key-info":
			svc := sts.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sts.GetAccessKeyInfoInput{}
			inputList := []sts.GetAccessKeyInfoInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetAccessKeyInfo(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sts/get-caller-identity":
			svc := sts.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sts.GetCallerIdentityInput{}
			inputList := []sts.GetCallerIdentityInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetCallerIdentity(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sts/get-federation-token":
			svc := sts.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sts.GetFederationTokenInput{}
			inputList := []sts.GetFederationTokenInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetFederationToken(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		case "pod.tzzh.sts/get-session-token":
			svc := sts.New(session.Must(session.NewSessionWithOptions(SessionOptions)))
			input := &sts.GetSessionTokenInput{}
			inputList := []sts.GetSessionTokenInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				return nil, err
			}
			if len(inputList) > 0 {
				input = &inputList[0]
			}
			res, err := svc.GetSessionToken(input)
			if err != nil {
				return nil, err
			}
			return res, nil

		}

	}
	return nil, errors.New("Unsupported Operation")
}
